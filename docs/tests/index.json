{
  "stats": {
    "suites": 26,
    "tests": 44,
    "passes": 44,
    "pending": 0,
    "failures": 0,
    "start": "2018-06-08T10:44:06.751Z",
    "end": "2018-06-08T10:44:06.778Z",
    "duration": 27,
    "testsRegistered": 44,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "398de564-af99-4f18-854d-57e47f6bdcbe",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "7cea8f14-617d-4b40-aba8-c3881bb34c43",
        "title": "acl",
        "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
        "file": "/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3d269875-8421-41e9-8f71-f47f0a336d3f",
            "title": "from(roles)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to create an instance from a configured json",
                "fullTitle": "acl from(roles) should be able to create an instance from a configured json",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"acl.roles\",\n  \"value\": {\n    \"foo\": {\n      \"users\": [\n        \"foobar\",\n        \"bazqux\"\n      ],\n      \"children\": [],\n      \"resources\": {\n        \"res-1\": [\n          \"perm-1-1\"\n        ],\n        \"res-2\": [\n          \"perm-2-1\",\n          \"perm-2-2\"\n        ]\n      }\n    },\n    \"bar\": {\n      \"users\": [\n        \"foobaz\"\n      ],\n      \"children\": [\n        \"foo\",\n        \"baz\"\n      ],\n      \"resources\": {}\n    },\n    \"baz\": {\n      \"users\": [],\n      \"children\": [],\n      \"resources\": {\n        \"res-0\": [],\n        \"res-1\": [\n          \"perm-1-1\",\n          \"perm-1-2\",\n          \"perm-1-3\"\n        ]\n      }\n    }\n  }\n}",
                "code": "const acl = new Acl\nacl.addRoleUser('foo', 'foobar')\nacl.addRoleUser('foo', 'bazqux')\nacl.addRoleUser('bar', 'foobaz')\nacl.addRoleChild('bar', 'foo')\nacl.addRoleChild('bar', 'baz')\nacl.addRoleResource('baz', 'res-0')\nacl.addRoleResourcePermission('foo', 'res-1', 'perm-1-1')\nacl.addRoleResourcePermission('foo', 'res-2', 'perm-2-1')\nacl.addRoleResourcePermission('foo', 'res-2', 'perm-2-2')\nacl.addRoleResourcePermission('baz', 'res-1', 'perm-1-1')\nacl.addRoleResourcePermission('baz', 'res-1', 'perm-1-2')\nacl.addRoleResourcePermission('baz', 'res-1', 'perm-1-3')\ncontext(this, { title:'acl.roles', value:acl.roles })\nexpect(Acl.from(acl.roles).roles).to.deep.equal(acl.roles)",
                "err": {},
                "isRoot": false,
                "uuid": "b889bcd2-23e5-4bc6-87ea-bb82e8eb0487",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw an error if there is an invalid key in the arg",
                "fullTitle": "acl from(roles) should throw an error if there is an invalid key in the arg",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(Acl.from.bind(null, { foo:{ bar:'baz' } })).to.throw(Error)",
                "err": {},
                "isRoot": false,
                "uuid": "573fda21-e3fe-470d-8405-5db41c9ea042",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b889bcd2-23e5-4bc6-87ea-bb82e8eb0487",
              "573fda21-e3fe-470d-8405-5db41c9ea042"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "12ac52d4-e03b-4460-a944-4086b99d8415",
            "title": "hasRole(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not find a role not previously added",
                "fullTitle": "acl hasRole(role) should not find a role not previously added",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "249e402d-dd59-4568-a0e6-9a50d2ccb55d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to find an existing role",
                "fullTitle": "acl hasRole(role) should be able to find an existing role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "9b1f1c77-d18c-4aeb-8642-79d5fb424985",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "249e402d-dd59-4568-a0e6-9a50d2ccb55d",
              "9b1f1c77-d18c-4aeb-8642-79d5fb424985"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "498cc522-3bfb-40a0-a78a-fa2de8d611a5",
            "title": "addRole(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a role",
                "fullTitle": "acl addRole(role) should be able to add a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "06ae3d91-1fae-40e6-a5a0-a1b51efab1a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adding the same role multiple times wont reset it",
                "fullTitle": "acl addRole(role) adding the same role multiple times wont reset it",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nuser  = 'bar'\nacl.addRole(role)\nacl.addRoleUser(role, user)\nacl.addRole(role)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "bd581014-022b-434e-b813-050bc28fc67a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "06ae3d91-1fae-40e6-a5a0-a1b51efab1a5",
              "bd581014-022b-434e-b813-050bc28fc67a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3d0dad4b-2082-4693-90e2-2b816dcdf7f9",
            "title": "removeRole(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "removing a non existing role wont throw",
                "fullTitle": "acl removeRole(role) removing a non existing role wont throw",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo'\nexpect(acl.removeRole.bind(acl, role)).to.not.throw()",
                "err": {},
                "isRoot": false,
                "uuid": "a2c68d2d-4208-4b45-b7ad-35aea0b90abd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removing an existing role to be removed",
                "fullTitle": "acl removeRole(role) removing an existing role to be removed",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo'\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)\nacl.removeRole(role)\nexpect(acl.hasRole(role)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "52655526-6d52-4dd4-9e54-5b7a6e5b8e9c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a2c68d2d-4208-4b45-b7ad-35aea0b90abd",
              "52655526-6d52-4dd4-9e54-5b7a6e5b8e9c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d813fee6-9b87-49d5-bf7f-d660472066b9",
            "title": "hasRoleChild(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return false if child is not child of role",
                "fullTitle": "acl hasRoleChild(role, child) should return false if child is not child of role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)\nacl.addRole(child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "72e8186e-e4d0-4052-93a6-4c693c47d86c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to find a child of a role",
                "fullTitle": "acl hasRoleChild(role, child) should be able to find a child of a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "a0636f55-8e80-42f6-8e83-a5e1ec8881b2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "72e8186e-e4d0-4052-93a6-4c693c47d86c",
              "a0636f55-8e80-42f6-8e83-a5e1ec8881b2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "78eaadb1-1e4e-44e7-bdf3-b41ae390ea59",
            "title": "hasRoleChildRecursively(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return false if child does not derive from role",
                "fullTitle": "acl hasRoleChildRecursively(role, child) should return false if child does not derive from role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl           = new Acl,\nrole          = 'foo',\nchild         = 'bar',\nchildOfChild  = 'baz'\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(child)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(childOfChild)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "89bf4154-1626-48c4-ae89-78b45dedc1d4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return true if child derives from role",
                "fullTitle": "acl hasRoleChildRecursively(role, child) should return true if child derives from role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl           = new Acl,\nrole          = 'foo',\nchild         = 'bar',\nchildOfChild  = 'baz'\nacl.addRoleChild(role, child)\nacl.addRoleChild(child, childOfChild)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "d8b63498-f8e4-4d0a-afdb-7d1230476392",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "89bf4154-1626-48c4-ae89-78b45dedc1d4",
              "d8b63498-f8e4-4d0a-afdb-7d1230476392"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "bceef36d-cca3-4566-9432-52e732c826df",
            "title": "addRoleChild(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a child to a role",
                "fullTitle": "acl addRoleChild(role, child) should be able to add a child to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRole(role)).to.be.equal(true)\nexpect(acl.hasRole(child)).to.be.equal(true)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "c5600484-22f9-42c6-96cf-5763b2a683ad",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c5600484-22f9-42c6-96cf-5763b2a683ad"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "28e0a772-2747-4368-809f-da9f548250f5",
            "title": "removeRoleChild(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a child from a role",
                "fullTitle": "acl removeRoleChild(role, child) should be able to remove a child from a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)\nacl.removeRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "46538447-1aae-40c3-b1b4-69f2db06f3b0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "46538447-1aae-40c3-b1b4-69f2db06f3b0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b331393d-a9cb-49dd-8c1e-c5806fa9f608",
            "title": "hasRoleUser(role, user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if role has user",
                "fullTitle": "acl hasRoleUser(role, user) should return true only if role has user",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "a2632dfd-1971-487d-aca9-5497fadcb93c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a2632dfd-1971-487d-aca9-5497fadcb93c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "96dacc83-d4cf-4664-b0d4-e9500712cc93",
            "title": "addRoleUser(role user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "adding a user to a role also creates the role",
                "fullTitle": "acl addRoleUser(role user) adding a user to a role also creates the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "5dc37884-03ea-4ebd-82bc-bbc01931fdc9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to add a user to a role",
                "fullTitle": "acl addRoleUser(role user) should be able to add a user to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "e70b4d78-124f-4e20-9616-27694d66f660",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5dc37884-03ea-4ebd-82bc-bbc01931fdc9",
              "e70b4d78-124f-4e20-9616-27694d66f660"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "57411838-da99-452b-90e5-94d3a1ad659a",
            "title": "removeRoleUser(role, user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a user from a role",
                "fullTitle": "acl removeRoleUser(role, user) should be able to remove a user from a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)\nacl.removeRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "a30d2c37-9ddf-4d51-91e6-232fadd226ef",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a30d2c37-9ddf-4d51-91e6-232fadd226ef"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3daf5e11-02d1-42d1-9850-d8831cb1f260",
            "title": "removeUser(user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a user from all roles",
                "fullTitle": "acl removeUser(user) should be able to remove a user from all roles",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo',\nrole2 = 'bar',\nrole3 = 'baz',\nuser  = 'qux'\nacl.addRoleUser(role1, user)\nacl.addRoleUser(role2, user)\nexpect(acl.hasRoleUser(role1, user)).to.be.equal(true)\nexpect(acl.hasRoleUser(role2, user)).to.be.equal(true)\nexpect(acl.hasRoleUser(role3, user)).to.be.equal(false)\nacl.removeUser(user)\nexpect(acl.hasRoleUser(role1, user)).to.be.equal(false)\nexpect(acl.hasRoleUser(role2, user)).to.be.equal(false)\nexpect(acl.hasRoleUser(role3, user)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "7706846d-dac3-467a-aeca-2fab40ee0262",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7706846d-dac3-467a-aeca-2fab40ee0262"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d7af5d55-b03a-4223-b658-de398d4400c1",
            "title": "hasRoleResource(role, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if the role has the resource",
                "fullTitle": "acl hasRoleResource(role, resource) should return true only if the role has the resource",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(false)\nacl.addRoleResource(role, resource)\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "887b937d-601c-439d-9889-3184c7dd36e3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "887b937d-601c-439d-9889-3184c7dd36e3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "75808405-b366-4e7f-8dee-5bda0c3f39dc",
            "title": "addRoleResource(role, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a resource to a role",
                "fullTitle": "acl addRoleResource(role, resource) should be able to add a resource to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(false)\nacl.addRoleResource(role, resource)\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "6c5440fb-d260-4317-a108-d861e7567158",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6c5440fb-d260-4317-a108-d861e7567158"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e52d2884-132c-45fc-bb81-fd44142fd032",
            "title": "removeRoleResource(role, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a resource from a role",
                "fullTitle": "acl removeRoleResource(role, resource) should be able to remove a resource from a role",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(false)\nacl.addRoleResource(role, resource)\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(true)\nacl.removeRoleResource(role, resource)\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "2c59fca9-8772-43a4-bf6f-92ffcda72964",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removing a resource from a role should not remove the role",
                "fullTitle": "acl removeRoleResource(role, resource) removing a resource from a role should not remove the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nacl.addRoleResource(role, resource)\nacl.removeRoleResource(role, resource)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "49c11901-1a79-452b-a32e-e01b8d977d07",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2c59fca9-8772-43a4-bf6f-92ffcda72964",
              "49c11901-1a79-452b-a32e-e01b8d977d07"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3d7e784d-00da-4bcf-9dc1-be3db15019ad",
            "title": "removeResource(resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a resource from all roles",
                "fullTitle": "acl removeResource(resource) should be able to remove a resource from all roles",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nresource  = 'qux'\nacl.addRole(role1)\nacl.addRoleResource(role2, resource)\nacl.addRoleResource(role3, resource)\nexpect(acl.hasRoleResource(role1, resource)).to.be.equal(false)\nexpect(acl.hasRoleResource(role2, resource)).to.be.equal(true)\nexpect(acl.hasRoleResource(role3, resource)).to.be.equal(true)\nacl.removeResource(resource)\nexpect(acl.hasRoleResource(role1, resource)).to.be.equal(false)\nexpect(acl.hasRoleResource(role2, resource)).to.be.equal(false)\nexpect(acl.hasRoleResource(role3, resource)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "073be0a0-e5bb-4174-aba4-03482e5cfbc4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "073be0a0-e5bb-4174-aba4-03482e5cfbc4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "64072f15-abbf-4fe4-81ad-fd142284d34d",
            "title": "hasRoleResourcePermission(role, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if the role has the permission",
                "fullTitle": "acl hasRoleResourcePermission(role, resource, permission) should return true only if the role has the permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(false)\nacl.addRoleResource(role, res)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(false)\nacl.addRoleResourcePermission(role, res, per)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "9527220a-3aa1-4ba3-bc39-fb3de064f111",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9527220a-3aa1-4ba3-bc39-fb3de064f111"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "fc8eb106-3fb2-4997-b733-29373e645d9e",
            "title": "addRoleResourcePermission(role, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a permission to a role",
                "fullTitle": "acl addRoleResourcePermission(role, resource, permission) should be able to add a permission to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(false)\nacl.addRoleResourcePermission(role, res, per)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "ad5c32f1-99c9-4db6-a519-c35bac6d6586",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add a resource to the role",
                "fullTitle": "acl addRoleResourcePermission(role, resource, permission) should add a resource to the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleResource(role, res)).to.be.equal(false)\nacl.addRoleResourcePermission(role, res, per)\nexpect(acl.hasRoleResource(role, res)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "84d62540-eb6a-487d-8e0e-0fed5bffe90f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add a role",
                "fullTitle": "acl addRoleResourcePermission(role, resource, permission) should add a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRoleResourcePermission(role, res, per)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "ad41917f-ade9-4511-ade1-5d9fe799dc34",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ad5c32f1-99c9-4db6-a519-c35bac6d6586",
              "84d62540-eb6a-487d-8e0e-0fed5bffe90f",
              "ad41917f-ade9-4511-ade1-5d9fe799dc34"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "cc2d7c6b-09f5-490d-9a0f-c7dc40d5d156",
            "title": "removeRoleResourcePermission(role, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a permission from a role resource",
                "fullTitle": "acl removeRoleResourcePermission(role, resource, permission) should remove a permission from a role resource",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleResourcePermission(role, res, per)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(true)\nacl.removeRoleResourcePermission(role, res, per)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "7abbacba-560f-4dac-a75c-b59ba2e6c97d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7abbacba-560f-4dac-a75c-b59ba2e6c97d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f2f5c3df-beaa-451f-bcfb-19b5c8fabc6e",
            "title": "removeResourcePermission(resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a permission from a resource on all roles",
                "fullTitle": "acl removeResourcePermission(resource, permission) should remove a permission from a resource on all roles",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo1',\nrole2 = 'foo2',\nrole3 = 'foo3',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleResource(role1, res)\nacl.addRoleResourcePermission(role2, res, per)\nacl.addRoleResourcePermission(role3, res, per)\nexpect(acl.hasRoleResourcePermission(role1, res, per)).to.be.equal(false)\nexpect(acl.hasRoleResourcePermission(role2, res, per)).to.be.equal(true)\nexpect(acl.hasRoleResourcePermission(role3, res, per)).to.be.equal(true)\nacl.removeResourcePermission(res, per)\nexpect(acl.hasRoleResourcePermission(role1, res, per)).to.be.equal(false)\nexpect(acl.hasRoleResourcePermission(role2, res, per)).to.be.equal(false)\nexpect(acl.hasRoleResourcePermission(role3, res, per)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "1aeec6e1-441f-489a-98f3-9d90ed8fbfbe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not remove the role and resouce",
                "fullTitle": "acl removeResourcePermission(resource, permission) should not remove the role and resouce",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo1',\nrole2 = 'foo2',\nrole3 = 'foo3',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleResource(role1, res)\nacl.addRoleResourcePermission(role2, res, per)\nacl.addRoleResourcePermission(role3, res, per)\nacl.removeResourcePermission(res, per)\nexpect(acl.hasRoleResource(role1, res, per)).to.be.equal(true)\nexpect(acl.hasRoleResource(role2, res, per)).to.be.equal(true)\nexpect(acl.hasRoleResource(role3, res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "e667c1d1-4bf4-4c69-8a2f-341c9d2dbdfe",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1aeec6e1-441f-489a-98f3-9d90ed8fbfbe",
              "e667c1d1-4bf4-4c69-8a2f-341c9d2dbdfe"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f35a80cc-0a56-48bf-b496-5396a8bb02ff",
            "title": "getUserRoles(user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of all the roles a user have",
                "fullTitle": "acl getUserRoles(user) should return a list of all the roles a user have",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nuser  = 'foobar',\nrole1 = 'foo',\nrole2 = 'bar',\nrole3 = 'baz',\nrole4 = 'qux'\nacl.addRoleUser(role1, user)\nacl.addRoleUser(role2, user)\nacl.addRoleChild(role1, role3)\nacl.addRoleChild(role2, role4)\nexpect(acl.getUserRoles(user)).to.have.members([role1, role2])",
                "err": {},
                "isRoot": false,
                "uuid": "d4a13b92-aff3-48d1-a652-f4fedbc36420",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d4a13b92-aff3-48d1-a652-f4fedbc36420"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8014831f-69f2-496f-b2d0-1415c983290d",
            "title": "getUserRolesRecursive(user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of roles and the derieved roles a user have",
                "fullTitle": "acl getUserRolesRecursive(user) should return a list of roles and the derieved roles a user have",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nuser1     = 'foobar1',\nuser2     = 'foobar2',\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nrole4     = 'qux',\nexpected  = [role1, role2, role3]\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user1)\nacl.addRoleChild(role1, role3)\nacl.addRole(role4)\nexpect(acl.getUserRolesRecursively(user1)).to.have.members(expected)\nacl.addRoleUser(role4, user2)\nexpect(acl.getUserRolesRecursively(user1)).to.have.members(expected)",
                "err": {},
                "isRoot": false,
                "uuid": "f879581d-0450-4c71-9458-90359161e01e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f879581d-0450-4c71-9458-90359161e01e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ec9ff6ac-b637-41fe-984f-2d8460c564a3",
            "title": "getRolesRecursively(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of roles derieved of the root role",
                "fullTitle": "acl getRolesRecursively(role) should return a list of roles derieved of the root role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nrole4     = 'qux',\nexpected  = [role1, role3]\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleChild(role1, role3)\nexpect(acl.getRolesRecursively(role1)).to.have.members(expected)\nacl.addRole(role4)\nexpect(acl.getRolesRecursively(role1)).to.have.members(expected)",
                "err": {},
                "isRoot": false,
                "uuid": "75a0c07d-f2c3-49a6-aaf0-d67d89c4ebf1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "75a0c07d-f2c3-49a6-aaf0-d67d89c4ebf1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7e82a41a-3da6-4115-85da-f712b92a31cb",
            "title": "isUserAuthorized(user, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only allow a valid permission",
                "fullTitle": "acl isUserAuthorized(user, resource, permission) should only allow a valid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser        = 'foo',\nrole        = 'bar',\nresource    = 'baz',\npermission  = 'qux'\nacl.addRoleUser(role, user)\nacl.addRoleResourcePermission(role, resource, permission)\nconst result = acl.isUserAuthorized(user, resource, permission)\nexpect(result).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "eccfe360-2dca-4c34-8d05-87132bb5e162",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow a valid permission through a role hierarchy",
                "fullTitle": "acl isUserAuthorized(user, resource, permission) should allow a valid permission through a role hierarchy",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser1       = 'foo1',\nuser2       = 'foo2',\nrole1       = 'bar1',\nrole2       = 'bar2',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user2)\nacl.addRoleResourcePermission(role1, resource1, permission)\nacl.addRoleResourcePermission(role2, resource2, permission)\nconst result1 = acl.isUserAuthorized(user1, resource2, permission)\nexpect(result1).to.be.equal(false)\nacl.addRoleChild(role1, role2)\nconst result2 = acl.isUserAuthorized(user1, resource2, permission)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "9ea23cbc-61ac-4408-a1d4-bcb6098a7fc2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow an invalid permission",
                "fullTitle": "acl isUserAuthorized(user, resource, permission) should not allow an invalid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser1       = 'foo1',\nuser2       = 'foo2',\nrole1       = 'bar1',\nrole2       = 'bar2',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user2)\nacl.addRoleResourcePermission(role1, resource1, permission)\nacl.addRoleResourcePermission(role2, resource2, permission)\nconst result1 = acl.isUserAuthorized(user1, resource1, permission)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isUserAuthorized(user1, resource2, permission)\nexpect(result2).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "6bfa5bd5-eb59-4aa3-b0bc-d24f2af857eb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eccfe360-2dca-4c34-8d05-87132bb5e162",
              "9ea23cbc-61ac-4408-a1d4-bcb6098a7fc2",
              "6bfa5bd5-eb59-4aa3-b0bc-d24f2af857eb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "695a462b-3302-44fb-821e-211edd895c47",
            "title": "isRoleAuthorized(role, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only allow a valid permission",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) should only allow a valid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole        = 'bar',\nresource    = 'baz',\npermission  = 'qux'\nacl.addRole(role)\nacl.addRoleResourcePermission(role, resource, permission)\nconst result = acl.isRoleAuthorized(role, resource, permission)\nexpect(result).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "44dc29c1-be79-49a0-bf17-a81332fef3cd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow a valid permission through a role hierarchy",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) should allow a valid permission through a role hierarchy",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nrole2       = 'bar2',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleResourcePermission(role1, resource1, permission)\nacl.addRoleResourcePermission(role2, resource2, permission)\nconst result1 = acl.isRoleAuthorized(role1, resource2, permission)\nexpect(result1).to.be.equal(false)\nacl.addRoleChild(role1, role2)\nconst result2 = acl.isRoleAuthorized(role1, resource2, permission)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "f218646f-46d5-4615-bc1b-9150ebb2fd8d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow an invalid permission",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) should not allow an invalid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nrole2       = 'bar2',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleResourcePermission(role1, resource1, permission)\nacl.addRoleResourcePermission(role2, resource2, permission)\nconst result1 = acl.isRoleAuthorized(role1, resource1, permission)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, resource2, permission)\nexpect(result2).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "68806648-b32f-49ad-8246-1ec32f5b4af4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "* for resouce should allow access to all resources",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) * for resouce should allow access to all resources",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRole(role1)\nacl.addRoleResourcePermission(role1, '*', permission)\nconst result1 = acl.isRoleAuthorized(role1, resource1, permission)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, resource2, permission)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "9b801cc5-fa1c-4b82-bf29-0aad1de43e94",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "* for permission should allow access to all permissions",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) * for permission should allow access to all permissions",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nresource1   = 'baz1',\npermission1 = 'qux1',\npermission2 = 'qux2'\nacl.addRole(role1)\nacl.addRoleResourcePermission(role1, resource1, '*')\nconst result1 = acl.isRoleAuthorized(role1, resource1, permission1)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, resource1, permission2)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "ee245ba6-a492-4525-a4c2-aeba5981822f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "* for permission and resource should allow access to everything",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) * for permission and resource should allow access to everything",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission1 = 'qux1',\npermission2 = 'qux2'\nacl.addRole(role1)\nacl.addRoleResourcePermission(role1, '*', '*')\nconst result1 = acl.isRoleAuthorized(role1, resource1, permission1)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, resource2, permission2)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "5f12fd61-d1ac-4cee-b9c4-5f48ae0edec2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "undefined permission should allow access on a resource level",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) undefined permission should allow access on a resource level",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nrole2       = 'bar2',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission1 = 'qux1',\npermission2 = 'qux2'\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleResourcePermission(role1, resource1, permission1)\nacl.addRoleResourcePermission(role2, resource2, permission2)\nconst result1 = acl.isRoleAuthorized(role1, resource1)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, resource2)\nexpect(result2).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "b3d64db2-6412-4042-b476-66593a304ae0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "44dc29c1-be79-49a0-bf17-a81332fef3cd",
              "f218646f-46d5-4615-bc1b-9150ebb2fd8d",
              "68806648-b32f-49ad-8246-1ec32f5b4af4",
              "9b801cc5-fa1c-4b82-bf29-0aad1de43e94",
              "ee245ba6-a492-4525-a4c2-aeba5981822f",
              "5f12fd61-d1ac-4cee-b9c4-5f48ae0edec2",
              "b3d64db2-6412-4042-b476-66593a304ae0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}