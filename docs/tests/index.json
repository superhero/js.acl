{
  "stats": {
    "suites": 26,
    "tests": 44,
    "passes": 44,
    "pending": 0,
    "failures": 0,
    "start": "2018-08-22T08:44:14.130Z",
    "end": "2018-08-22T08:44:14.158Z",
    "duration": 28,
    "testsRegistered": 44,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "bbb785d0-390f-4e4f-b912-7579904da8a4",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "5d95dc94-40b8-42d1-acb8-d09f68d57942",
        "title": "acl",
        "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
        "file": "/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3676adab-6ac4-47cc-ab89-074f1d0a5fff",
            "title": "from(roles)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to create an instance from a configured json",
                "fullTitle": "acl from(roles) should be able to create an instance from a configured json",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"acl.roles\",\n  \"value\": {\n    \"foo\": {\n      \"users\": [\n        \"foobar\",\n        \"bazqux\"\n      ],\n      \"children\": [],\n      \"domains\": {\n        \"domain\": {\n          \"res-1\": [\n            \"perm-1-1\"\n          ],\n          \"res-2\": [\n            \"perm-2-2\"\n          ]\n        }\n      }\n    },\n    \"bar\": {\n      \"users\": [\n        \"foobaz\"\n      ],\n      \"children\": [\n        \"foo\",\n        \"baz\"\n      ],\n      \"domains\": {}\n    },\n    \"baz\": {\n      \"users\": [],\n      \"children\": [],\n      \"domains\": {\n        \"domain\": {\n          \"res-0\": [],\n          \"res-1\": [\n            \"perm-1-3\"\n          ]\n        }\n      }\n    }\n  }\n}",
                "code": "const acl = new Acl\nacl.addRoleUser('foo', 'foobar')\nacl.addRoleUser('foo', 'bazqux')\nacl.addRoleUser('bar', 'foobaz')\nacl.addRoleChild('bar', 'foo')\nacl.addRoleChild('bar', 'baz')\nacl.addRoleDomainResource('baz', 'domain', 'res-0')\nacl.addRoleDomainResourcePermission('foo', 'domain', 'res-1', 'perm-1-1')\nacl.addRoleDomainResourcePermission('foo', 'domain', 'res-2', 'perm-2-1')\nacl.addRoleDomainResourcePermission('foo', 'domain', 'res-2', 'perm-2-2')\nacl.addRoleDomainResourcePermission('baz', 'domain', 'res-1', 'perm-1-1')\nacl.addRoleDomainResourcePermission('baz', 'domain', 'res-1', 'perm-1-2')\nacl.addRoleDomainResourcePermission('baz', 'domain', 'res-1', 'perm-1-3')\ncontext(this, { title:'acl.roles', value:acl.roles })\nexpect(Acl.from(acl.roles).roles).to.deep.equal(acl.roles)",
                "err": {},
                "isRoot": false,
                "uuid": "f92042a0-8692-4710-bfb3-b81f7b5d1bc3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw an error if there is an invalid key in the arg",
                "fullTitle": "acl from(roles) should throw an error if there is an invalid key in the arg",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(Acl.from.bind(null, { foo:{ bar:'baz' } })).to.throw(Error)",
                "err": {},
                "isRoot": false,
                "uuid": "4570fe8c-712f-4408-a94a-39989b93ad58",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f92042a0-8692-4710-bfb3-b81f7b5d1bc3",
              "4570fe8c-712f-4408-a94a-39989b93ad58"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3faa24ca-2b9f-48a5-a4ae-8a1472358c54",
            "title": "hasRole(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not find a role not previously added",
                "fullTitle": "acl hasRole(role) should not find a role not previously added",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "cc07d043-5b6d-4bd4-aacf-33b795039b76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to find an existing role",
                "fullTitle": "acl hasRole(role) should be able to find an existing role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "ecf3f9e6-ce95-477a-a851-a872bfa100dd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cc07d043-5b6d-4bd4-aacf-33b795039b76",
              "ecf3f9e6-ce95-477a-a851-a872bfa100dd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "550369af-668d-4728-839a-676ca3a496ee",
            "title": "addRole(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a role",
                "fullTitle": "acl addRole(role) should be able to add a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "48ffcccc-c446-4e8d-afcf-474aef2057d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adding the same role multiple times wont reset it",
                "fullTitle": "acl addRole(role) adding the same role multiple times wont reset it",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nuser  = 'bar'\nacl.addRole(role)\nacl.addRoleUser(role, user)\nacl.addRole(role)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "168f542e-f28c-4387-b7f8-eea0497338a5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "48ffcccc-c446-4e8d-afcf-474aef2057d1",
              "168f542e-f28c-4387-b7f8-eea0497338a5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7cf588f6-e098-40c1-bbc9-b26a009638c9",
            "title": "removeRole(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "removing a non existing role wont throw",
                "fullTitle": "acl removeRole(role) removing a non existing role wont throw",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo'\nexpect(acl.removeRole.bind(acl, role)).to.not.throw()",
                "err": {},
                "isRoot": false,
                "uuid": "4c01bd0f-0108-436f-9052-1e7411aec4e2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removing an existing role to be removed",
                "fullTitle": "acl removeRole(role) removing an existing role to be removed",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo'\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)\nacl.removeRole(role)\nexpect(acl.hasRole(role)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "2b7f2ee6-e2db-4245-85f8-b4f6e1976013",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4c01bd0f-0108-436f-9052-1e7411aec4e2",
              "2b7f2ee6-e2db-4245-85f8-b4f6e1976013"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "601fb5e8-b293-40b6-9d42-511f83e5e2a8",
            "title": "hasRoleChild(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return false if child is not child of role",
                "fullTitle": "acl hasRoleChild(role, child) should return false if child is not child of role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)\nacl.addRole(child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "38f42504-db4c-4d97-9815-7f3a6551d23a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to find a child of a role",
                "fullTitle": "acl hasRoleChild(role, child) should be able to find a child of a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "a7cc3ce0-773b-4ea4-b309-759450bd2a23",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "38f42504-db4c-4d97-9815-7f3a6551d23a",
              "a7cc3ce0-773b-4ea4-b309-759450bd2a23"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "52e339a3-f808-40a1-bcfa-2f6f5e137cce",
            "title": "hasRoleChildRecursively(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return false if child does not derive from role",
                "fullTitle": "acl hasRoleChildRecursively(role, child) should return false if child does not derive from role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl           = new Acl,\nrole          = 'foo',\nchild         = 'bar',\nchildOfChild  = 'baz'\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(child)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(childOfChild)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "cabaf2a7-4c53-4c63-b950-c92fb2da6ebd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return true if child derives from role",
                "fullTitle": "acl hasRoleChildRecursively(role, child) should return true if child derives from role",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl           = new Acl,\nrole          = 'foo',\nchild         = 'bar',\nchildOfChild  = 'baz'\nacl.addRoleChild(role, child)\nacl.addRoleChild(child, childOfChild)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "75103d1e-1017-4ca6-a022-35eb390792d5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cabaf2a7-4c53-4c63-b950-c92fb2da6ebd",
              "75103d1e-1017-4ca6-a022-35eb390792d5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f48445c4-6a48-40b0-8211-61b6df03689a",
            "title": "addRoleChild(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a child to a role",
                "fullTitle": "acl addRoleChild(role, child) should be able to add a child to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRole(role)).to.be.equal(true)\nexpect(acl.hasRole(child)).to.be.equal(true)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "9141c3b6-6888-48f3-864b-81d98d46b6b7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9141c3b6-6888-48f3-864b-81d98d46b6b7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "69ac8cfc-8443-42dd-9186-a161f7ab2384",
            "title": "removeRoleChild(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a child from a role",
                "fullTitle": "acl removeRoleChild(role, child) should be able to remove a child from a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)\nacl.removeRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "a1322162-4fe5-472d-a54e-905dc718211a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a1322162-4fe5-472d-a54e-905dc718211a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "516a6321-aa9e-40b3-a85b-d8ac56feef5b",
            "title": "hasRoleUser(role, user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if role has user",
                "fullTitle": "acl hasRoleUser(role, user) should return true only if role has user",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "e7deae48-0f9b-44ec-affa-0ced6c3b4168",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e7deae48-0f9b-44ec-affa-0ced6c3b4168"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c87e5555-eca7-44e3-a43f-539413976e6e",
            "title": "addRoleUser(role user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "adding a user to a role also creates the role",
                "fullTitle": "acl addRoleUser(role user) adding a user to a role also creates the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "f33c2c59-1e44-42ef-be11-51ed7eb966f2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to add a user to a role",
                "fullTitle": "acl addRoleUser(role user) should be able to add a user to a role",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "25c71864-1e6d-4ed5-92ef-7dfbb8e53263",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f33c2c59-1e44-42ef-be11-51ed7eb966f2",
              "25c71864-1e6d-4ed5-92ef-7dfbb8e53263"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "72efdcbe-e5c8-4f53-a3ce-5e5342b4278d",
            "title": "removeRoleUser(role, user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a user from a role",
                "fullTitle": "acl removeRoleUser(role, user) should be able to remove a user from a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)\nacl.removeRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "6c829188-d297-4510-b8be-7cbedd54776e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6c829188-d297-4510-b8be-7cbedd54776e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "fd2a3129-19ce-4609-8416-5d4bb29431c7",
            "title": "removeUser(user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a user from all roles",
                "fullTitle": "acl removeUser(user) should be able to remove a user from all roles",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo',\nrole2 = 'bar',\nrole3 = 'baz',\nuser  = 'qux'\nacl.addRoleUser(role1, user)\nacl.addRoleUser(role2, user)\nexpect(acl.hasRoleUser(role1, user)).to.be.equal(true)\nexpect(acl.hasRoleUser(role2, user)).to.be.equal(true)\nexpect(acl.hasRoleUser(role3, user)).to.be.equal(false)\nacl.removeUser(user)\nexpect(acl.hasRoleUser(role1, user)).to.be.equal(false)\nexpect(acl.hasRoleUser(role2, user)).to.be.equal(false)\nexpect(acl.hasRoleUser(role3, user)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "b94b40e3-772e-4153-aeea-55a4674cf4aa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b94b40e3-772e-4153-aeea-55a4674cf4aa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d8277ddf-ac6b-435b-9ef3-92b0d4943fad",
            "title": "hasRoleDomainResource(role, domain, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if the role has the resource",
                "fullTitle": "acl hasRoleDomainResource(role, domain, resource) should return true only if the role has the resource",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nexpect(acl.hasRoleDomainResource(role, 'domain', resource)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleDomainResource(role, 'domain', resource)).to.be.equal(false)\nacl.addRoleDomainResource(role, 'domain', resource)\nexpect(acl.hasRoleDomainResource(role, 'domain', resource)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "386ad25a-61b2-4603-811a-b5189a48580a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "386ad25a-61b2-4603-811a-b5189a48580a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f6730ff5-b8ed-4afa-9e8b-6c307df46a24",
            "title": "addRoleDomainResource(role, domain, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a resource to a role",
                "fullTitle": "acl addRoleDomainResource(role, domain, resource) should be able to add a resource to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nexpect(acl.hasRoleDomainResource(role, 'domain', resource)).to.be.equal(false)\nacl.addRoleDomainResource(role, 'domain', resource)\nexpect(acl.hasRoleDomainResource(role, 'domain', resource)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "7ba7cfc8-eca5-4c2a-83fd-4d9a96cd572a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7ba7cfc8-eca5-4c2a-83fd-4d9a96cd572a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "82e42274-6012-4c9b-953c-c76e77fd7c1d",
            "title": "removeRoleDomainResource(role, domain, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a resource from a role",
                "fullTitle": "acl removeRoleDomainResource(role, domain, resource) should be able to remove a resource from a role",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\ndomain    = 'domain',\nresource  = 'bar'\nexpect(acl.hasRoleDomainResource(role, domain, resource)).to.be.equal(false)\nacl.addRoleDomainResource(role, domain, resource)\nexpect(acl.hasRoleDomainResource(role, domain, resource)).to.be.equal(true)\nacl.removeRoleDomainResource(role, domain, resource)\nexpect(acl.hasRoleDomainResource(role, domain, resource)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "49d71283-e12b-4af3-97c0-40b768aa19ca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removing a resource from a role should not remove the role",
                "fullTitle": "acl removeRoleDomainResource(role, domain, resource) removing a resource from a role should not remove the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nacl.addRoleDomainResource(role, 'domain', resource)\nacl.removeRoleDomainResource(role, 'domain', resource)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "fd0330ec-3b3e-4bd7-b137-7b6454d982e5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "49d71283-e12b-4af3-97c0-40b768aa19ca",
              "fd0330ec-3b3e-4bd7-b137-7b6454d982e5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a1229755-b9bb-43fa-a9cf-26edd5d37359",
            "title": "removeDomainResource(domain, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a resource from all roles",
                "fullTitle": "acl removeDomainResource(domain, resource) should be able to remove a resource from all roles",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nresource  = 'qux'\nacl.addRole(role1)\nacl.addRoleDomainResource(role2, 'domain', resource)\nacl.addRoleDomainResource(role3, 'domain', resource)\nexpect(acl.hasRoleDomainResource(role1, 'domain', resource)).to.be.equal(false)\nexpect(acl.hasRoleDomainResource(role2, 'domain', resource)).to.be.equal(true)\nexpect(acl.hasRoleDomainResource(role3, 'domain', resource)).to.be.equal(true)\nacl.removeDomainResource('domain', resource)\nexpect(acl.hasRoleDomainResource(role1, 'domain', resource)).to.be.equal(false)\nexpect(acl.hasRoleDomainResource(role2, 'domain', resource)).to.be.equal(false)\nexpect(acl.hasRoleDomainResource(role3, 'domain', resource)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "c61a671d-a4bc-4d29-9649-d4685d1477a6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c61a671d-a4bc-4d29-9649-d4685d1477a6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d494b5d7-b96c-4ae0-8c48-62a3aa3e9639",
            "title": "hasRoleDomainResourcePermission(role, domain, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if the role has the permission",
                "fullTitle": "acl hasRoleDomainResourcePermission(role, domain, resource, permission) should return true only if the role has the permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(false)\nacl.addRoleDomainResource(role, 'domain', res)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(false)\nacl.addRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "6715ed3a-8f02-42d7-9b4a-be658a8c07ef",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6715ed3a-8f02-42d7-9b4a-be658a8c07ef"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "14ecb060-f32c-46b5-a9f9-47c7f4220b6c",
            "title": "addRoleDomainResourcePermission(role, domain, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a permission to a role",
                "fullTitle": "acl addRoleDomainResourcePermission(role, domain, resource, permission) should be able to add a permission to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(false)\nacl.addRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "a3eb93b6-e6a0-476b-b096-28a383e513a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add a resource to the role",
                "fullTitle": "acl addRoleDomainResourcePermission(role, domain, resource, permission) should add a resource to the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleDomainResource(role, 'domain', res)).to.be.equal(false)\nacl.addRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRoleDomainResource(role, 'domain', res)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "95965e12-1f48-45bc-8ced-a238b34c5a2a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add a role",
                "fullTitle": "acl addRoleDomainResourcePermission(role, domain, resource, permission) should add a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "5308842b-2b09-4ae4-8d45-89ff2b5766d6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a3eb93b6-e6a0-476b-b096-28a383e513a4",
              "95965e12-1f48-45bc-8ced-a238b34c5a2a",
              "5308842b-2b09-4ae4-8d45-89ff2b5766d6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "408ecab4-891e-436b-b20e-ea1df4d1a28c",
            "title": "removeRoleDomainResourcePermission(role, domain, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a permission from a role resource",
                "fullTitle": "acl removeRoleDomainResourcePermission(role, domain, resource, permission) should remove a permission from a role resource",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(true)\nacl.removeRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "d6067ca4-c99d-49f3-8fa1-6dfe32dc1cee",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d6067ca4-c99d-49f3-8fa1-6dfe32dc1cee"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8026f545-564b-472e-8cc9-f457c2ef753c",
            "title": "removeDomainResourcePermission(domain, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a permission from a resource on all roles",
                "fullTitle": "acl removeDomainResourcePermission(domain, resource, permission) should remove a permission from a resource on all roles",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo1',\nrole2 = 'foo2',\nrole3 = 'foo3',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleDomainResource(role1, 'domain', res)\nacl.addRoleDomainResourcePermission(role2, 'domain', res, per)\nacl.addRoleDomainResourcePermission(role3, 'domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role1, 'domain', res, per)).to.be.equal(false)\nexpect(acl.hasRoleDomainResourcePermission(role2, 'domain', res, per)).to.be.equal(true)\nexpect(acl.hasRoleDomainResourcePermission(role3, 'domain', res, per)).to.be.equal(true)\nacl.removeDomainResourcePermission('domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role1, 'domain', res, per)).to.be.equal(false)\nexpect(acl.hasRoleDomainResourcePermission(role2, 'domain', res, per)).to.be.equal(false)\nexpect(acl.hasRoleDomainResourcePermission(role3, 'domain', res, per)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "6a24feec-ef27-40b3-8620-0b56c7904fc0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not remove the role and resouce",
                "fullTitle": "acl removeDomainResourcePermission(domain, resource, permission) should not remove the role and resouce",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo1',\nrole2 = 'foo2',\nrole3 = 'foo3',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleDomainResource(role1, 'domain', res)\nacl.addRoleDomainResourcePermission(role2, 'domain', res, per)\nacl.addRoleDomainResourcePermission(role3, 'domain', res, per)\nacl.removeDomainResourcePermission(res, 'domain', per)\nexpect(acl.hasRoleDomainResource(role1, 'domain', res, per)).to.be.equal(true)\nexpect(acl.hasRoleDomainResource(role2, 'domain', res, per)).to.be.equal(true)\nexpect(acl.hasRoleDomainResource(role3, 'domain', res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "4c86ba5a-370b-4d26-8238-335018f067f3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6a24feec-ef27-40b3-8620-0b56c7904fc0",
              "4c86ba5a-370b-4d26-8238-335018f067f3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5cac22a9-5f4c-4ff9-9ec7-a7fdaaeba9a1",
            "title": "getUserRoles(user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of all the roles a user have",
                "fullTitle": "acl getUserRoles(user) should return a list of all the roles a user have",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nuser  = 'foobar',\nrole1 = 'foo',\nrole2 = 'bar',\nrole3 = 'baz',\nrole4 = 'qux'\nacl.addRoleUser(role1, user)\nacl.addRoleUser(role2, user)\nacl.addRoleChild(role1, role3)\nacl.addRoleChild(role2, role4)\nexpect(acl.getUserRoles(user)).to.have.members([role1, role2])",
                "err": {},
                "isRoot": false,
                "uuid": "a550e0af-27da-4139-a5b5-bc4927d872f8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a550e0af-27da-4139-a5b5-bc4927d872f8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9876926d-4b43-45f4-944a-96fbf89303ee",
            "title": "getUserRolesRecursive(user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of roles and the derieved roles a user have",
                "fullTitle": "acl getUserRolesRecursive(user) should return a list of roles and the derieved roles a user have",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nuser1     = 'foobar1',\nuser2     = 'foobar2',\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nrole4     = 'qux',\nexpected  = [role1, role2, role3]\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user1)\nacl.addRoleChild(role1, role3)\nacl.addRole(role4)\nexpect(acl.getUserRolesRecursively(user1)).to.have.members(expected)\nacl.addRoleUser(role4, user2)\nexpect(acl.getUserRolesRecursively(user1)).to.have.members(expected)",
                "err": {},
                "isRoot": false,
                "uuid": "b153a3cf-9922-4a84-bb53-e5130363b33e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b153a3cf-9922-4a84-bb53-e5130363b33e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ec22b313-3240-491f-8e03-8e1e833e3dd7",
            "title": "getRolesRecursively(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of roles derieved of the root role",
                "fullTitle": "acl getRolesRecursively(role) should return a list of roles derieved of the root role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nrole4     = 'qux',\nexpected  = [role1, role3]\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleChild(role1, role3)\nexpect(acl.getRolesRecursively(role1)).to.have.members(expected)\nacl.addRole(role4)\nexpect(acl.getRolesRecursively(role1)).to.have.members(expected)",
                "err": {},
                "isRoot": false,
                "uuid": "e666120a-c248-40bb-997e-491e80e75e50",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e666120a-c248-40bb-997e-491e80e75e50"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "bf6cb1f5-788c-461d-9167-b6605c4c573a",
            "title": "isUserAuthorized(user, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only allow a valid permission",
                "fullTitle": "acl isUserAuthorized(user, resource, permission) should only allow a valid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser        = 'foo',\nrole        = 'bar',\ndomain      = 'domain',\nresource    = 'baz',\npermission  = 'qux'\nacl.addRoleUser(role, user)\nacl.addRoleDomainResourcePermission(role, domain, resource, permission)\nconst result = acl.isUserAuthorized(user, domain, resource, permission)\nexpect(result).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "ce544a09-8609-4c39-b6cd-d00d5a7e5b52",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow a valid permission through a role hierarchy",
                "fullTitle": "acl isUserAuthorized(user, resource, permission) should allow a valid permission through a role hierarchy",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser1       = 'foo1',\nuser2       = 'foo2',\nrole1       = 'bar1',\nrole2       = 'bar2',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user2)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, permission)\nacl.addRoleDomainResourcePermission(role2, domain, resource2, permission)\nconst result1 = acl.isUserAuthorized(user1, domain, resource2, permission)\nexpect(result1).to.be.equal(false)\nacl.addRoleChild(role1, role2)\nconst result2 = acl.isUserAuthorized(user1, domain, resource2, permission)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "17b8e7cc-19e6-4707-bdf8-399cd82f79ce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow an invalid permission",
                "fullTitle": "acl isUserAuthorized(user, resource, permission) should not allow an invalid permission",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser1       = 'foo1',\nuser2       = 'foo2',\nrole1       = 'bar1',\nrole2       = 'bar2',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user2)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, permission)\nacl.addRoleDomainResourcePermission(role2, domain, resource2, permission)\nconst result1 = acl.isUserAuthorized(user1, domain, resource1, permission)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isUserAuthorized(user1, domain, resource2, permission)\nexpect(result2).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "73fd46f0-54ee-4d6b-b724-3f1e1ec3a4b6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ce544a09-8609-4c39-b6cd-d00d5a7e5b52",
              "17b8e7cc-19e6-4707-bdf8-399cd82f79ce",
              "73fd46f0-54ee-4d6b-b724-3f1e1ec3a4b6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e30852a5-c53c-4207-bb3e-2bf7f242dcbd",
            "title": "isRoleAuthorized(role, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only allow a valid permission",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) should only allow a valid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole        = 'bar',\ndomain      = 'domain',\nresource    = 'baz',\npermission  = 'qux'\nacl.addRole(role)\nacl.addRoleDomainResourcePermission(role, domain, resource, permission)\nconst result = acl.isRoleAuthorized(role, domain, resource, permission)\nexpect(result).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "fd3f34d6-58ec-49cc-9de2-5d8447053817",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow a valid permission through a role hierarchy",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) should allow a valid permission through a role hierarchy",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nrole2       = 'bar2',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, permission)\nacl.addRoleDomainResourcePermission(role2, domain, resource2, permission)\nconst result1 = acl.isRoleAuthorized(role1, domain, resource2, permission)\nexpect(result1).to.be.equal(false)\nacl.addRoleChild(role1, role2)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource2, permission)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "f212be0b-280e-4ca8-aa60-03aa77b3c10f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow an invalid permission",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) should not allow an invalid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nrole2       = 'bar2',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, permission)\nacl.addRoleDomainResourcePermission(role2, domain, resource2, permission)\nconst result1 = acl.isRoleAuthorized(role1, domain, resource1, permission)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource2, permission)\nexpect(result2).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "237845d4-08d5-4996-9e11-dc5f5a1dd0d3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "* for resouce should allow access to all resources",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) * for resouce should allow access to all resources",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRole(role1)\nacl.addRoleDomainResourcePermission(role1, domain, '*', permission)\nconst result1 = acl.isRoleAuthorized(role1, domain, resource1, permission)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource2, permission)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "03cbdfd6-e94a-41f0-ba0d-042cd92e20e2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "* for permission should allow access to all permissions",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) * for permission should allow access to all permissions",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\ndomain      = 'domain',\nresource1   = 'baz1',\npermission1 = 'qux1',\npermission2 = 'qux2'\nacl.addRole(role1)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, '*')\nconst result1 = acl.isRoleAuthorized(role1, domain, resource1, permission1)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource1, permission2)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "59cd88ce-47f8-4f7b-b6a3-1550c1b0e377",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "* for permission and resource should allow access to everything",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) * for permission and resource should allow access to everything",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission1 = 'qux1',\npermission2 = 'qux2'\nacl.addRole(role1)\nacl.addRoleDomainResourcePermission(role1, domain, '*', '*')\nconst result1 = acl.isRoleAuthorized(role1, domain, resource1, permission1)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource2, permission2)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "1296116f-1a2e-4f0f-a2d4-533859b97551",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "undefined permission should allow access on a resource level",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) undefined permission should allow access on a resource level",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nrole2       = 'bar2',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission1 = 'qux1',\npermission2 = 'qux2'\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, permission1)\nacl.addRoleDomainResourcePermission(role2, domain, resource2, permission2)\nconst result1 = acl.isRoleAuthorized(role1, domain, resource1)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource2)\nexpect(result2).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "5a03a59c-177a-4842-b732-fef6f3ea4761",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fd3f34d6-58ec-49cc-9de2-5d8447053817",
              "f212be0b-280e-4ca8-aa60-03aa77b3c10f",
              "237845d4-08d5-4996-9e11-dc5f5a1dd0d3",
              "03cbdfd6-e94a-41f0-ba0d-042cd92e20e2",
              "59cd88ce-47f8-4f7b-b6a3-1550c1b0e377",
              "1296116f-1a2e-4f0f-a2d4-533859b97551",
              "5a03a59c-177a-4842-b732-fef6f3ea4761"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}