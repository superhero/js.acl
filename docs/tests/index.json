{
  "stats": {
    "suites": 26,
    "tests": 44,
    "passes": 44,
    "pending": 0,
    "failures": 0,
    "start": "2018-08-28T09:16:07.589Z",
    "end": "2018-08-28T09:16:07.617Z",
    "duration": 28,
    "testsRegistered": 44,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "ec77f2bd-49dc-4630-9dd0-f36ceb6726ea",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "7cc677f8-3380-47d4-8e35-7e10d5a02737",
        "title": "acl",
        "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
        "file": "/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0688343f-1653-413a-b13e-9b584f439754",
            "title": "from(roles)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to create an instance from a configured json",
                "fullTitle": "acl from(roles) should be able to create an instance from a configured json",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"acl.roles\",\n  \"value\": {\n    \"foo\": {\n      \"users\": [\n        \"foobar\",\n        \"bazqux\"\n      ],\n      \"children\": [],\n      \"domains\": {\n        \"domain\": {\n          \"res-1\": [\n            \"perm-1-1\"\n          ],\n          \"res-2\": [\n            \"perm-2-2\"\n          ]\n        }\n      }\n    },\n    \"bar\": {\n      \"users\": [\n        \"foobaz\"\n      ],\n      \"children\": [\n        \"foo\",\n        \"baz\"\n      ],\n      \"domains\": {}\n    },\n    \"baz\": {\n      \"users\": [],\n      \"children\": [],\n      \"domains\": {\n        \"domain\": {\n          \"res-0\": [],\n          \"res-1\": [\n            \"perm-1-3\"\n          ]\n        }\n      }\n    }\n  }\n}",
                "code": "const acl = new Acl\nacl.addRoleUser('foo', 'foobar')\nacl.addRoleUser('foo', 'bazqux')\nacl.addRoleUser('bar', 'foobaz')\nacl.addRoleChild('bar', 'foo')\nacl.addRoleChild('bar', 'baz')\nacl.addRoleDomainResource('baz', 'domain', 'res-0')\nacl.addRoleDomainResourcePermission('foo', 'domain', 'res-1', 'perm-1-1')\nacl.addRoleDomainResourcePermission('foo', 'domain', 'res-2', 'perm-2-1')\nacl.addRoleDomainResourcePermission('foo', 'domain', 'res-2', 'perm-2-2')\nacl.addRoleDomainResourcePermission('baz', 'domain', 'res-1', 'perm-1-1')\nacl.addRoleDomainResourcePermission('baz', 'domain', 'res-1', 'perm-1-2')\nacl.addRoleDomainResourcePermission('baz', 'domain', 'res-1', 'perm-1-3')\ncontext(this, { title:'acl.roles', value:acl.roles })\nexpect(Acl.from(acl.roles).roles).to.deep.equal(acl.roles)",
                "err": {},
                "isRoot": false,
                "uuid": "c541a247-66c0-46d9-8ab2-0d23bb0534c4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw an error if there is an invalid key in the arg",
                "fullTitle": "acl from(roles) should throw an error if there is an invalid key in the arg",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(Acl.from.bind(null, { foo:{ bar:'baz' } })).to.throw(Error)",
                "err": {},
                "isRoot": false,
                "uuid": "e9521f89-b61e-41b2-abc5-1fddb5149330",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c541a247-66c0-46d9-8ab2-0d23bb0534c4",
              "e9521f89-b61e-41b2-abc5-1fddb5149330"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7f105760-8713-4038-b6cb-29d33fb9dfbb",
            "title": "hasRole(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not find a role not previously added",
                "fullTitle": "acl hasRole(role) should not find a role not previously added",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "296efc73-2cb7-4436-b31d-478a2792d01b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to find an existing role",
                "fullTitle": "acl hasRole(role) should be able to find an existing role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "d0ea0760-e321-41a4-9da2-cf55277de33e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "296efc73-2cb7-4436-b31d-478a2792d01b",
              "d0ea0760-e321-41a4-9da2-cf55277de33e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "af4b7c35-92f3-4590-bfbc-4c58cff69400",
            "title": "addRole(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a role",
                "fullTitle": "acl addRole(role) should be able to add a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "89779115-21df-4c2d-9af4-014193b1deca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adding the same role multiple times wont reset it",
                "fullTitle": "acl addRole(role) adding the same role multiple times wont reset it",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nuser  = 'bar'\nacl.addRole(role)\nacl.addRoleUser(role, user)\nacl.addRole(role)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "d7fbc19d-5d19-41c9-8b9a-200f433dab20",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "89779115-21df-4c2d-9af4-014193b1deca",
              "d7fbc19d-5d19-41c9-8b9a-200f433dab20"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3fbd13d0-0ae7-4fa2-af48-d4804687c419",
            "title": "removeRole(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "removing a non existing role wont throw",
                "fullTitle": "acl removeRole(role) removing a non existing role wont throw",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo'\nexpect(acl.removeRole.bind(acl, role)).to.not.throw()",
                "err": {},
                "isRoot": false,
                "uuid": "f3b34bba-2e7b-407a-813e-7934cb4e9ac2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removing an existing role to be removed",
                "fullTitle": "acl removeRole(role) removing an existing role to be removed",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo'\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)\nacl.removeRole(role)\nexpect(acl.hasRole(role)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "e193550c-9c7b-4106-9425-a009d7afe565",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f3b34bba-2e7b-407a-813e-7934cb4e9ac2",
              "e193550c-9c7b-4106-9425-a009d7afe565"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c3ecc0c8-fcd7-45db-b62d-aeb88bcf1630",
            "title": "hasRoleChild(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return false if child is not child of role",
                "fullTitle": "acl hasRoleChild(role, child) should return false if child is not child of role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)\nacl.addRole(child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "dfa11129-d871-4877-8253-f8bfa8c94b6c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to find a child of a role",
                "fullTitle": "acl hasRoleChild(role, child) should be able to find a child of a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "dc131f90-fa14-4125-a337-6115df53c28d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dfa11129-d871-4877-8253-f8bfa8c94b6c",
              "dc131f90-fa14-4125-a337-6115df53c28d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "78368b5b-7dfb-49a8-99bf-5bbb060b32d7",
            "title": "hasRoleChildRecursively(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return false if child does not derive from role",
                "fullTitle": "acl hasRoleChildRecursively(role, child) should return false if child does not derive from role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl           = new Acl,\nrole          = 'foo',\nchild         = 'bar',\nchildOfChild  = 'baz'\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(child)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(childOfChild)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "92cdad33-364f-41ca-936b-2a160653fca8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return true if child derives from role",
                "fullTitle": "acl hasRoleChildRecursively(role, child) should return true if child derives from role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl           = new Acl,\nrole          = 'foo',\nchild         = 'bar',\nchildOfChild  = 'baz'\nacl.addRoleChild(role, child)\nacl.addRoleChild(child, childOfChild)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "b71d982b-e56d-4399-bea6-0773a172ee13",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "92cdad33-364f-41ca-936b-2a160653fca8",
              "b71d982b-e56d-4399-bea6-0773a172ee13"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1fe55f6a-a7f0-4da2-80d8-2c4f8bc85e20",
            "title": "addRoleChild(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a child to a role",
                "fullTitle": "acl addRoleChild(role, child) should be able to add a child to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRole(role)).to.be.equal(true)\nexpect(acl.hasRole(child)).to.be.equal(true)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "cf099244-a441-4472-9ce4-f7e504b775b5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cf099244-a441-4472-9ce4-f7e504b775b5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c82e95dd-31a7-463f-9fbd-38b8b6f4f5ad",
            "title": "removeRoleChild(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a child from a role",
                "fullTitle": "acl removeRoleChild(role, child) should be able to remove a child from a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)\nacl.removeRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "6798bb68-f5fa-4966-8389-277e83551bd6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6798bb68-f5fa-4966-8389-277e83551bd6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "53a79bc2-a47f-4abe-8bd1-44ad4eebe10e",
            "title": "hasRoleUser(role, user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if role has user",
                "fullTitle": "acl hasRoleUser(role, user) should return true only if role has user",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "fbe451f9-1073-4aaf-993b-ff249f264840",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fbe451f9-1073-4aaf-993b-ff249f264840"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "254f4072-bd14-4456-91cf-aaca0211227c",
            "title": "addRoleUser(role user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "adding a user to a role also creates the role",
                "fullTitle": "acl addRoleUser(role user) adding a user to a role also creates the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "a11cf2df-7ffd-4e30-8d03-25f1d2f8eb79",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to add a user to a role",
                "fullTitle": "acl addRoleUser(role user) should be able to add a user to a role",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "6619bdc4-7563-4b52-b97a-24101f5985ef",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a11cf2df-7ffd-4e30-8d03-25f1d2f8eb79",
              "6619bdc4-7563-4b52-b97a-24101f5985ef"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a80e94da-48d3-4890-be2d-0725a743b0bf",
            "title": "removeRoleUser(role, user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a user from a role",
                "fullTitle": "acl removeRoleUser(role, user) should be able to remove a user from a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)\nacl.removeRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "4037a615-13c8-44fc-87cd-b1769b0fe2af",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4037a615-13c8-44fc-87cd-b1769b0fe2af"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "bca6a4b6-956a-4681-a7f1-06a41ca5722f",
            "title": "removeUser(user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a user from all roles",
                "fullTitle": "acl removeUser(user) should be able to remove a user from all roles",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo',\nrole2 = 'bar',\nrole3 = 'baz',\nuser  = 'qux'\nacl.addRoleUser(role1, user)\nacl.addRoleUser(role2, user)\nexpect(acl.hasRoleUser(role1, user)).to.be.equal(true)\nexpect(acl.hasRoleUser(role2, user)).to.be.equal(true)\nexpect(acl.hasRoleUser(role3, user)).to.be.equal(false)\nacl.removeUser(user)\nexpect(acl.hasRoleUser(role1, user)).to.be.equal(false)\nexpect(acl.hasRoleUser(role2, user)).to.be.equal(false)\nexpect(acl.hasRoleUser(role3, user)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "2123c17b-5021-42d4-9caa-95bd2ece50c9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2123c17b-5021-42d4-9caa-95bd2ece50c9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e477b7e1-be25-4fd8-a9d7-84663997f14e",
            "title": "hasRoleDomainResource(role, domain, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if the role has the resource",
                "fullTitle": "acl hasRoleDomainResource(role, domain, resource) should return true only if the role has the resource",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nexpect(acl.hasRoleDomainResource(role, 'domain', resource)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleDomainResource(role, 'domain', resource)).to.be.equal(false)\nacl.addRoleDomainResource(role, 'domain', resource)\nexpect(acl.hasRoleDomainResource(role, 'domain', resource)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "819872fc-f70d-482f-8b78-2e53dbb4dfc7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "819872fc-f70d-482f-8b78-2e53dbb4dfc7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6857234f-3db0-4210-af85-280d8e7e5df2",
            "title": "addRoleDomainResource(role, domain, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a resource to a role",
                "fullTitle": "acl addRoleDomainResource(role, domain, resource) should be able to add a resource to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nexpect(acl.hasRoleDomainResource(role, 'domain', resource)).to.be.equal(false)\nacl.addRoleDomainResource(role, 'domain', resource)\nexpect(acl.hasRoleDomainResource(role, 'domain', resource)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "7f996e77-f002-4952-80bc-3d24f1e9e779",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7f996e77-f002-4952-80bc-3d24f1e9e779"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "54bb9f66-582d-4b1c-8e2c-124663571801",
            "title": "removeRoleDomainResource(role, domain, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a resource from a role",
                "fullTitle": "acl removeRoleDomainResource(role, domain, resource) should be able to remove a resource from a role",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\ndomain    = 'domain',\nresource  = 'bar'\nexpect(acl.hasRoleDomainResource(role, domain, resource)).to.be.equal(false)\nacl.addRoleDomainResource(role, domain, resource)\nexpect(acl.hasRoleDomainResource(role, domain, resource)).to.be.equal(true)\nacl.removeRoleDomainResource(role, domain, resource)\nexpect(acl.hasRoleDomainResource(role, domain, resource)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "cfa50aef-ff73-444b-8600-ae19e0165b69",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removing a resource from a role should not remove the role",
                "fullTitle": "acl removeRoleDomainResource(role, domain, resource) removing a resource from a role should not remove the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nacl.addRoleDomainResource(role, 'domain', resource)\nacl.removeRoleDomainResource(role, 'domain', resource)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "a2b92ed8-e715-4e95-b0c7-4ea4d7166bd7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cfa50aef-ff73-444b-8600-ae19e0165b69",
              "a2b92ed8-e715-4e95-b0c7-4ea4d7166bd7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2f7ea5c2-0b05-4977-9c52-6b9ef8d69253",
            "title": "removeDomainResource(domain, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a resource from all roles",
                "fullTitle": "acl removeDomainResource(domain, resource) should be able to remove a resource from all roles",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nresource  = 'qux'\nacl.addRole(role1)\nacl.addRoleDomainResource(role2, 'domain', resource)\nacl.addRoleDomainResource(role3, 'domain', resource)\nexpect(acl.hasRoleDomainResource(role1, 'domain', resource)).to.be.equal(false)\nexpect(acl.hasRoleDomainResource(role2, 'domain', resource)).to.be.equal(true)\nexpect(acl.hasRoleDomainResource(role3, 'domain', resource)).to.be.equal(true)\nacl.removeDomainResource('domain', resource)\nexpect(acl.hasRoleDomainResource(role1, 'domain', resource)).to.be.equal(false)\nexpect(acl.hasRoleDomainResource(role2, 'domain', resource)).to.be.equal(false)\nexpect(acl.hasRoleDomainResource(role3, 'domain', resource)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "e3b15372-3226-41a7-96ea-0b07e5d2eb57",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e3b15372-3226-41a7-96ea-0b07e5d2eb57"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "384522f8-44e0-42c8-8d94-65a69625eaf2",
            "title": "hasRoleDomainResourcePermission(role, domain, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if the role has the permission",
                "fullTitle": "acl hasRoleDomainResourcePermission(role, domain, resource, permission) should return true only if the role has the permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(false)\nacl.addRoleDomainResource(role, 'domain', res)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(false)\nacl.addRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "f921374b-9902-41d9-9e96-8e9f8052970b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f921374b-9902-41d9-9e96-8e9f8052970b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "86d53e11-8533-41dd-b0b6-8d36526d344c",
            "title": "addRoleDomainResourcePermission(role, domain, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a permission to a role",
                "fullTitle": "acl addRoleDomainResourcePermission(role, domain, resource, permission) should be able to add a permission to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(false)\nacl.addRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "ebb43dee-6922-4df4-8c05-6f8ec987883a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add a resource to the role",
                "fullTitle": "acl addRoleDomainResourcePermission(role, domain, resource, permission) should add a resource to the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleDomainResource(role, 'domain', res)).to.be.equal(false)\nacl.addRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRoleDomainResource(role, 'domain', res)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "402c5739-bea5-496f-83e8-6ad8844012cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add a role",
                "fullTitle": "acl addRoleDomainResourcePermission(role, domain, resource, permission) should add a role",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "97aac59f-d15e-4548-b59a-e772a6f00109",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ebb43dee-6922-4df4-8c05-6f8ec987883a",
              "402c5739-bea5-496f-83e8-6ad8844012cb",
              "97aac59f-d15e-4548-b59a-e772a6f00109"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c6e393e1-d9d4-4abc-89bd-3be795c34b97",
            "title": "removeRoleDomainResourcePermission(role, domain, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a permission from a role resource",
                "fullTitle": "acl removeRoleDomainResourcePermission(role, domain, resource, permission) should remove a permission from a role resource",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(true)\nacl.removeRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "810e949c-7ae3-4a3a-80ab-6ec6e0a856cc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "810e949c-7ae3-4a3a-80ab-6ec6e0a856cc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "054b4bba-d6d8-46b0-b85c-3a7acf8244bc",
            "title": "removeDomainResourcePermission(domain, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a permission from a resource on all roles",
                "fullTitle": "acl removeDomainResourcePermission(domain, resource, permission) should remove a permission from a resource on all roles",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo1',\nrole2 = 'foo2',\nrole3 = 'foo3',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleDomainResource(role1, 'domain', res)\nacl.addRoleDomainResourcePermission(role2, 'domain', res, per)\nacl.addRoleDomainResourcePermission(role3, 'domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role1, 'domain', res, per)).to.be.equal(false)\nexpect(acl.hasRoleDomainResourcePermission(role2, 'domain', res, per)).to.be.equal(true)\nexpect(acl.hasRoleDomainResourcePermission(role3, 'domain', res, per)).to.be.equal(true)\nacl.removeDomainResourcePermission('domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role1, 'domain', res, per)).to.be.equal(false)\nexpect(acl.hasRoleDomainResourcePermission(role2, 'domain', res, per)).to.be.equal(false)\nexpect(acl.hasRoleDomainResourcePermission(role3, 'domain', res, per)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "b4024104-3651-433a-8ad9-ed214619d08f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not remove the role and resouce",
                "fullTitle": "acl removeDomainResourcePermission(domain, resource, permission) should not remove the role and resouce",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo1',\nrole2 = 'foo2',\nrole3 = 'foo3',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleDomainResource(role1, 'domain', res)\nacl.addRoleDomainResourcePermission(role2, 'domain', res, per)\nacl.addRoleDomainResourcePermission(role3, 'domain', res, per)\nacl.removeDomainResourcePermission(res, 'domain', per)\nexpect(acl.hasRoleDomainResource(role1, 'domain', res, per)).to.be.equal(true)\nexpect(acl.hasRoleDomainResource(role2, 'domain', res, per)).to.be.equal(true)\nexpect(acl.hasRoleDomainResource(role3, 'domain', res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "823f1efa-62bc-44aa-b423-da1f9daeeca7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b4024104-3651-433a-8ad9-ed214619d08f",
              "823f1efa-62bc-44aa-b423-da1f9daeeca7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c28c44aa-84d7-498a-8ed7-840e3f416010",
            "title": "getUserRoles(user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of all the roles a user have",
                "fullTitle": "acl getUserRoles(user) should return a list of all the roles a user have",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nuser  = 'foobar',\nrole1 = 'foo',\nrole2 = 'bar',\nrole3 = 'baz',\nrole4 = 'qux'\nacl.addRoleUser(role1, user)\nacl.addRoleUser(role2, user)\nacl.addRoleChild(role1, role3)\nacl.addRoleChild(role2, role4)\nexpect(acl.getUserRoles(user)).to.have.members([role1, role2])",
                "err": {},
                "isRoot": false,
                "uuid": "f91a30aa-f1bf-44c1-91a6-026372a287ec",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f91a30aa-f1bf-44c1-91a6-026372a287ec"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9821959d-0ef6-4ba8-ad74-5b5e9c099ac0",
            "title": "getUserRolesRecursive(user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of roles and the derieved roles a user have",
                "fullTitle": "acl getUserRolesRecursive(user) should return a list of roles and the derieved roles a user have",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nuser1     = 'foobar1',\nuser2     = 'foobar2',\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nrole4     = 'qux',\nexpected  = [role1, role2, role3]\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user1)\nacl.addRoleChild(role1, role3)\nacl.addRole(role4)\nexpect(acl.getUserRolesRecursively(user1)).to.have.members(expected)\nacl.addRoleUser(role4, user2)\nexpect(acl.getUserRolesRecursively(user1)).to.have.members(expected)",
                "err": {},
                "isRoot": false,
                "uuid": "f5f3f307-a4ed-4c5a-96d3-8ddce06f8224",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f5f3f307-a4ed-4c5a-96d3-8ddce06f8224"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f39cdc07-6e70-45f4-b515-2058d550259d",
            "title": "getRolesRecursively(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of roles derieved of the root role",
                "fullTitle": "acl getRolesRecursively(role) should return a list of roles derieved of the root role",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nrole4     = 'qux',\nexpected  = [role1, role3]\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleChild(role1, role3)\nexpect(acl.getRolesRecursively(role1)).to.have.members(expected)\nacl.addRole(role4)\nexpect(acl.getRolesRecursively(role1)).to.have.members(expected)",
                "err": {},
                "isRoot": false,
                "uuid": "e5a859e7-7a22-4250-a0d8-46d8433523d8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e5a859e7-7a22-4250-a0d8-46d8433523d8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f421fb1e-7e17-49cb-9649-4494389a8fda",
            "title": "isUserAuthorized(user, domain, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only allow a valid permission",
                "fullTitle": "acl isUserAuthorized(user, domain, resource, permission) should only allow a valid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser        = 'foo',\nrole        = 'bar',\ndomain      = 'domain',\nresource    = 'baz',\npermission  = 'qux'\nacl.addRoleUser(role, user)\nacl.addRoleDomainResourcePermission(role, domain, resource, permission)\nconst result = acl.isUserAuthorized(user, domain, resource, permission)\nexpect(result).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "6ba189c8-b214-4d57-8660-68f54ab163f9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow a valid permission through a role hierarchy",
                "fullTitle": "acl isUserAuthorized(user, domain, resource, permission) should allow a valid permission through a role hierarchy",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser1       = 'foo1',\nuser2       = 'foo2',\nrole1       = 'bar1',\nrole2       = 'bar2',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user2)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, permission)\nacl.addRoleDomainResourcePermission(role2, domain, resource2, permission)\nconst result1 = acl.isUserAuthorized(user1, domain, resource2, permission)\nexpect(result1).to.be.equal(false)\nacl.addRoleChild(role1, role2)\nconst result2 = acl.isUserAuthorized(user1, domain, resource2, permission)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "512d571c-e97a-4248-9e92-dd75c041d2cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow an invalid permission",
                "fullTitle": "acl isUserAuthorized(user, domain, resource, permission) should not allow an invalid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser1       = 'foo1',\nuser2       = 'foo2',\nrole1       = 'bar1',\nrole2       = 'bar2',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user2)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, permission)\nacl.addRoleDomainResourcePermission(role2, domain, resource2, permission)\nconst result1 = acl.isUserAuthorized(user1, domain, resource1, permission)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isUserAuthorized(user1, domain, resource2, permission)\nexpect(result2).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "e290de04-6d7e-4c5a-b1f9-932f702eb846",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6ba189c8-b214-4d57-8660-68f54ab163f9",
              "512d571c-e97a-4248-9e92-dd75c041d2cb",
              "e290de04-6d7e-4c5a-b1f9-932f702eb846"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2a371c33-54f6-4d29-a6f0-bc0b5c36d52b",
            "title": "isRoleAuthorized(role, domain, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only allow a valid permission",
                "fullTitle": "acl isRoleAuthorized(role, domain, resource, permission) should only allow a valid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole        = 'bar',\ndomain      = 'domain',\nresource    = 'baz',\npermission  = 'qux'\nacl.addRole(role)\nacl.addRoleDomainResourcePermission(role, domain, resource, permission)\nconst result = acl.isRoleAuthorized(role, domain, resource, permission)\nexpect(result).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "b715c6cd-60af-498d-a2a6-b78a7aa4d98e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow a valid permission through a role hierarchy",
                "fullTitle": "acl isRoleAuthorized(role, domain, resource, permission) should allow a valid permission through a role hierarchy",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nrole2       = 'bar2',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, permission)\nacl.addRoleDomainResourcePermission(role2, domain, resource2, permission)\nconst result1 = acl.isRoleAuthorized(role1, domain, resource2, permission)\nexpect(result1).to.be.equal(false)\nacl.addRoleChild(role1, role2)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource2, permission)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "e4e6be8e-b930-423f-be2e-c3ed91cc0dc8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow an invalid permission",
                "fullTitle": "acl isRoleAuthorized(role, domain, resource, permission) should not allow an invalid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nrole2       = 'bar2',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, permission)\nacl.addRoleDomainResourcePermission(role2, domain, resource2, permission)\nconst result1 = acl.isRoleAuthorized(role1, domain, resource1, permission)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource2, permission)\nexpect(result2).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "84601498-e6ce-40e4-a44d-2494a49d58e1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "* for resouce should allow access to all resources",
                "fullTitle": "acl isRoleAuthorized(role, domain, resource, permission) * for resouce should allow access to all resources",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRole(role1)\nacl.addRoleDomainResourcePermission(role1, domain, '*', permission)\nconst result1 = acl.isRoleAuthorized(role1, domain, resource1, permission)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource2, permission)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "468a7280-7c42-4077-895f-a3eec3da47b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "* for permission should allow access to all permissions",
                "fullTitle": "acl isRoleAuthorized(role, domain, resource, permission) * for permission should allow access to all permissions",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\ndomain      = 'domain',\nresource1   = 'baz1',\npermission1 = 'qux1',\npermission2 = 'qux2'\nacl.addRole(role1)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, '*')\nconst result1 = acl.isRoleAuthorized(role1, domain, resource1, permission1)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource1, permission2)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "d79e9bad-7699-45cf-8e97-4b526eddb5d3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "* for permission and resource should allow access to everything",
                "fullTitle": "acl isRoleAuthorized(role, domain, resource, permission) * for permission and resource should allow access to everything",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission1 = 'qux1',\npermission2 = 'qux2'\nacl.addRole(role1)\nacl.addRoleDomainResourcePermission(role1, domain, '*', '*')\nconst result1 = acl.isRoleAuthorized(role1, domain, resource1, permission1)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource2, permission2)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "f797ea54-75f5-4382-92f1-b8b9c0de7836",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "undefined permission should allow access on a resource level",
                "fullTitle": "acl isRoleAuthorized(role, domain, resource, permission) undefined permission should allow access on a resource level",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nrole2       = 'bar2',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission1 = 'qux1',\npermission2 = 'qux2'\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, permission1)\nacl.addRoleDomainResourcePermission(role2, domain, resource2, permission2)\nconst result1 = acl.isRoleAuthorized(role1, domain, resource1)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource2)\nexpect(result2).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "3d0acfb9-7208-4ebb-ba45-114a4ff579d6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b715c6cd-60af-498d-a2a6-b78a7aa4d98e",
              "e4e6be8e-b930-423f-be2e-c3ed91cc0dc8",
              "84601498-e6ce-40e4-a44d-2494a49d58e1",
              "468a7280-7c42-4077-895f-a3eec3da47b1",
              "d79e9bad-7699-45cf-8e97-4b526eddb5d3",
              "f797ea54-75f5-4382-92f1-b8b9c0de7836",
              "3d0acfb9-7208-4ebb-ba45-114a4ff579d6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}