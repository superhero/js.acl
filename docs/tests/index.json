{
  "stats": {
    "suites": 26,
    "tests": 44,
    "passes": 44,
    "pending": 0,
    "failures": 0,
    "start": "2018-08-22T09:58:29.773Z",
    "end": "2018-08-22T09:58:29.802Z",
    "duration": 29,
    "testsRegistered": 44,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "9c1ac75b-bd29-4545-9103-47b8358e418b",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "25778d78-8060-43f9-a960-74c8bf7f8657",
        "title": "acl",
        "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
        "file": "/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f41e8502-dd6a-4e7c-b422-56849032b410",
            "title": "from(roles)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to create an instance from a configured json",
                "fullTitle": "acl from(roles) should be able to create an instance from a configured json",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"acl.roles\",\n  \"value\": {\n    \"foo\": {\n      \"users\": [\n        \"foobar\",\n        \"bazqux\"\n      ],\n      \"children\": [],\n      \"domains\": {\n        \"domain\": {\n          \"res-1\": [\n            \"perm-1-1\"\n          ],\n          \"res-2\": [\n            \"perm-2-2\"\n          ]\n        }\n      }\n    },\n    \"bar\": {\n      \"users\": [\n        \"foobaz\"\n      ],\n      \"children\": [\n        \"foo\",\n        \"baz\"\n      ],\n      \"domains\": {}\n    },\n    \"baz\": {\n      \"users\": [],\n      \"children\": [],\n      \"domains\": {\n        \"domain\": {\n          \"res-0\": [],\n          \"res-1\": [\n            \"perm-1-3\"\n          ]\n        }\n      }\n    }\n  }\n}",
                "code": "const acl = new Acl\nacl.addRoleUser('foo', 'foobar')\nacl.addRoleUser('foo', 'bazqux')\nacl.addRoleUser('bar', 'foobaz')\nacl.addRoleChild('bar', 'foo')\nacl.addRoleChild('bar', 'baz')\nacl.addRoleDomainResource('baz', 'domain', 'res-0')\nacl.addRoleDomainResourcePermission('foo', 'domain', 'res-1', 'perm-1-1')\nacl.addRoleDomainResourcePermission('foo', 'domain', 'res-2', 'perm-2-1')\nacl.addRoleDomainResourcePermission('foo', 'domain', 'res-2', 'perm-2-2')\nacl.addRoleDomainResourcePermission('baz', 'domain', 'res-1', 'perm-1-1')\nacl.addRoleDomainResourcePermission('baz', 'domain', 'res-1', 'perm-1-2')\nacl.addRoleDomainResourcePermission('baz', 'domain', 'res-1', 'perm-1-3')\ncontext(this, { title:'acl.roles', value:acl.roles })\nexpect(Acl.from(acl.roles).roles).to.deep.equal(acl.roles)",
                "err": {},
                "isRoot": false,
                "uuid": "62fed091-34f7-4ad4-8fff-f77999835d4e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw an error if there is an invalid key in the arg",
                "fullTitle": "acl from(roles) should throw an error if there is an invalid key in the arg",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(Acl.from.bind(null, { foo:{ bar:'baz' } })).to.throw(Error)",
                "err": {},
                "isRoot": false,
                "uuid": "e4174787-5a0f-4a5e-abfc-0aa464a45820",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "62fed091-34f7-4ad4-8fff-f77999835d4e",
              "e4174787-5a0f-4a5e-abfc-0aa464a45820"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b5460a77-c52f-4fd0-ae1d-eba3317ef0f2",
            "title": "hasRole(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not find a role not previously added",
                "fullTitle": "acl hasRole(role) should not find a role not previously added",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "8bf99e48-fbe4-4d3d-92f0-e4c0c692fb76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to find an existing role",
                "fullTitle": "acl hasRole(role) should be able to find an existing role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "b0911250-6097-47b1-8d2c-07990b4f260f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8bf99e48-fbe4-4d3d-92f0-e4c0c692fb76",
              "b0911250-6097-47b1-8d2c-07990b4f260f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3c160896-0797-457a-9d2d-0adc53ad8f8a",
            "title": "addRole(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a role",
                "fullTitle": "acl addRole(role) should be able to add a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "d337e04e-6eb4-4b14-b0d7-5217b77b819a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adding the same role multiple times wont reset it",
                "fullTitle": "acl addRole(role) adding the same role multiple times wont reset it",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nuser  = 'bar'\nacl.addRole(role)\nacl.addRoleUser(role, user)\nacl.addRole(role)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "4a6a0fa6-d6f5-4532-a938-6063cb5ebda8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d337e04e-6eb4-4b14-b0d7-5217b77b819a",
              "4a6a0fa6-d6f5-4532-a938-6063cb5ebda8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "26e29cdb-15f8-4f59-b8b5-5ec4a0fef169",
            "title": "removeRole(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "removing a non existing role wont throw",
                "fullTitle": "acl removeRole(role) removing a non existing role wont throw",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo'\nexpect(acl.removeRole.bind(acl, role)).to.not.throw()",
                "err": {},
                "isRoot": false,
                "uuid": "3fff713b-52bd-406f-a124-170af623dce7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removing an existing role to be removed",
                "fullTitle": "acl removeRole(role) removing an existing role to be removed",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo'\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)\nacl.removeRole(role)\nexpect(acl.hasRole(role)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "f984c7e1-920b-4f5f-9498-2fc1b163c19c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3fff713b-52bd-406f-a124-170af623dce7",
              "f984c7e1-920b-4f5f-9498-2fc1b163c19c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "eaecfb8e-97b7-47ed-8bfc-ec16e1fbaef8",
            "title": "hasRoleChild(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return false if child is not child of role",
                "fullTitle": "acl hasRoleChild(role, child) should return false if child is not child of role",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)\nacl.addRole(child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "6913037c-95fe-4e0c-aa90-61cd4242d426",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to find a child of a role",
                "fullTitle": "acl hasRoleChild(role, child) should be able to find a child of a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "540693e4-455a-4042-9370-9c10bd2219d1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6913037c-95fe-4e0c-aa90-61cd4242d426",
              "540693e4-455a-4042-9370-9c10bd2219d1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f11833f5-c585-4068-98dd-b1937929f1b4",
            "title": "hasRoleChildRecursively(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return false if child does not derive from role",
                "fullTitle": "acl hasRoleChildRecursively(role, child) should return false if child does not derive from role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl           = new Acl,\nrole          = 'foo',\nchild         = 'bar',\nchildOfChild  = 'baz'\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(child)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(childOfChild)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "a26f5d6e-774a-4ef3-8e4d-9bb82677900c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return true if child derives from role",
                "fullTitle": "acl hasRoleChildRecursively(role, child) should return true if child derives from role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl           = new Acl,\nrole          = 'foo',\nchild         = 'bar',\nchildOfChild  = 'baz'\nacl.addRoleChild(role, child)\nacl.addRoleChild(child, childOfChild)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "6afb70d8-beb5-41be-88f9-a3a19fa7c7b4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a26f5d6e-774a-4ef3-8e4d-9bb82677900c",
              "6afb70d8-beb5-41be-88f9-a3a19fa7c7b4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "90978e78-2431-4169-b92e-f07a04568521",
            "title": "addRoleChild(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a child to a role",
                "fullTitle": "acl addRoleChild(role, child) should be able to add a child to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRole(role)).to.be.equal(true)\nexpect(acl.hasRole(child)).to.be.equal(true)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "884e5f6b-cbec-440a-9984-a6c0072ad6c6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "884e5f6b-cbec-440a-9984-a6c0072ad6c6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f35f48df-2b57-4dd0-8294-b0b39a9194f5",
            "title": "removeRoleChild(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a child from a role",
                "fullTitle": "acl removeRoleChild(role, child) should be able to remove a child from a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)\nacl.removeRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "6a10916a-6585-49d1-b438-848e9ac68a8d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6a10916a-6585-49d1-b438-848e9ac68a8d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2e5de382-d113-44aa-bc26-1fd5e43ffe2f",
            "title": "hasRoleUser(role, user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if role has user",
                "fullTitle": "acl hasRoleUser(role, user) should return true only if role has user",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "1714d6a7-85a3-45a7-a237-192a055c0913",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1714d6a7-85a3-45a7-a237-192a055c0913"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ffdd64b9-8961-4b90-ba7c-058f5d5f835a",
            "title": "addRoleUser(role user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "adding a user to a role also creates the role",
                "fullTitle": "acl addRoleUser(role user) adding a user to a role also creates the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "f5a8a288-6849-429c-a2e5-8b9744430fbd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to add a user to a role",
                "fullTitle": "acl addRoleUser(role user) should be able to add a user to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "ca15da10-f2d9-4499-b9a3-1e62915eba6e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f5a8a288-6849-429c-a2e5-8b9744430fbd",
              "ca15da10-f2d9-4499-b9a3-1e62915eba6e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e9fde413-4f5b-4fa2-bd38-2c1d1d35f044",
            "title": "removeRoleUser(role, user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a user from a role",
                "fullTitle": "acl removeRoleUser(role, user) should be able to remove a user from a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)\nacl.removeRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "7d5e234a-1412-4bc8-a1f7-8b2f7bb9d470",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7d5e234a-1412-4bc8-a1f7-8b2f7bb9d470"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "cc18642f-3ca9-4fba-99f9-66ecd32f3b28",
            "title": "removeUser(user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a user from all roles",
                "fullTitle": "acl removeUser(user) should be able to remove a user from all roles",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo',\nrole2 = 'bar',\nrole3 = 'baz',\nuser  = 'qux'\nacl.addRoleUser(role1, user)\nacl.addRoleUser(role2, user)\nexpect(acl.hasRoleUser(role1, user)).to.be.equal(true)\nexpect(acl.hasRoleUser(role2, user)).to.be.equal(true)\nexpect(acl.hasRoleUser(role3, user)).to.be.equal(false)\nacl.removeUser(user)\nexpect(acl.hasRoleUser(role1, user)).to.be.equal(false)\nexpect(acl.hasRoleUser(role2, user)).to.be.equal(false)\nexpect(acl.hasRoleUser(role3, user)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "3784472f-8bc4-49af-af71-efca054eb853",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3784472f-8bc4-49af-af71-efca054eb853"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "713a4861-ce4f-4353-909b-df414b9269b5",
            "title": "hasRoleDomainResource(role, domain, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if the role has the resource",
                "fullTitle": "acl hasRoleDomainResource(role, domain, resource) should return true only if the role has the resource",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nexpect(acl.hasRoleDomainResource(role, 'domain', resource)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleDomainResource(role, 'domain', resource)).to.be.equal(false)\nacl.addRoleDomainResource(role, 'domain', resource)\nexpect(acl.hasRoleDomainResource(role, 'domain', resource)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "38b240a5-d0b8-477a-af07-d56a1746a30a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "38b240a5-d0b8-477a-af07-d56a1746a30a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b74d3470-dbe6-483d-b951-36ac0ebe3c81",
            "title": "addRoleDomainResource(role, domain, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a resource to a role",
                "fullTitle": "acl addRoleDomainResource(role, domain, resource) should be able to add a resource to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nexpect(acl.hasRoleDomainResource(role, 'domain', resource)).to.be.equal(false)\nacl.addRoleDomainResource(role, 'domain', resource)\nexpect(acl.hasRoleDomainResource(role, 'domain', resource)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "69f0c513-c031-430b-8931-289827a95e72",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "69f0c513-c031-430b-8931-289827a95e72"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d0844f75-4acd-4ed8-b9a7-9632864eb121",
            "title": "removeRoleDomainResource(role, domain, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a resource from a role",
                "fullTitle": "acl removeRoleDomainResource(role, domain, resource) should be able to remove a resource from a role",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\ndomain    = 'domain',\nresource  = 'bar'\nexpect(acl.hasRoleDomainResource(role, domain, resource)).to.be.equal(false)\nacl.addRoleDomainResource(role, domain, resource)\nexpect(acl.hasRoleDomainResource(role, domain, resource)).to.be.equal(true)\nacl.removeRoleDomainResource(role, domain, resource)\nexpect(acl.hasRoleDomainResource(role, domain, resource)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "5f734b37-0bb8-43f4-835a-dbf03e85d0d7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removing a resource from a role should not remove the role",
                "fullTitle": "acl removeRoleDomainResource(role, domain, resource) removing a resource from a role should not remove the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nacl.addRoleDomainResource(role, 'domain', resource)\nacl.removeRoleDomainResource(role, 'domain', resource)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "2d72d7f7-072d-408f-9cce-d20201542154",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5f734b37-0bb8-43f4-835a-dbf03e85d0d7",
              "2d72d7f7-072d-408f-9cce-d20201542154"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3403e0eb-a427-4518-bcef-13daac7d996d",
            "title": "removeDomainResource(domain, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a resource from all roles",
                "fullTitle": "acl removeDomainResource(domain, resource) should be able to remove a resource from all roles",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nresource  = 'qux'\nacl.addRole(role1)\nacl.addRoleDomainResource(role2, 'domain', resource)\nacl.addRoleDomainResource(role3, 'domain', resource)\nexpect(acl.hasRoleDomainResource(role1, 'domain', resource)).to.be.equal(false)\nexpect(acl.hasRoleDomainResource(role2, 'domain', resource)).to.be.equal(true)\nexpect(acl.hasRoleDomainResource(role3, 'domain', resource)).to.be.equal(true)\nacl.removeDomainResource('domain', resource)\nexpect(acl.hasRoleDomainResource(role1, 'domain', resource)).to.be.equal(false)\nexpect(acl.hasRoleDomainResource(role2, 'domain', resource)).to.be.equal(false)\nexpect(acl.hasRoleDomainResource(role3, 'domain', resource)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "37744708-baec-4510-8856-56259d9e3745",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "37744708-baec-4510-8856-56259d9e3745"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2ed196db-e291-423f-9dde-615ad3774290",
            "title": "hasRoleDomainResourcePermission(role, domain, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if the role has the permission",
                "fullTitle": "acl hasRoleDomainResourcePermission(role, domain, resource, permission) should return true only if the role has the permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(false)\nacl.addRoleDomainResource(role, 'domain', res)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(false)\nacl.addRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "379fcb4a-e10e-477a-b169-224c192880b2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "379fcb4a-e10e-477a-b169-224c192880b2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "32bbac25-78ce-4062-8b6b-18d85872b760",
            "title": "addRoleDomainResourcePermission(role, domain, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a permission to a role",
                "fullTitle": "acl addRoleDomainResourcePermission(role, domain, resource, permission) should be able to add a permission to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(false)\nacl.addRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "8f2b2d57-c0db-456f-ab15-6221590a1e66",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add a resource to the role",
                "fullTitle": "acl addRoleDomainResourcePermission(role, domain, resource, permission) should add a resource to the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleDomainResource(role, 'domain', res)).to.be.equal(false)\nacl.addRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRoleDomainResource(role, 'domain', res)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "27c0c0cd-3aa1-4014-9a9a-374578e29bbf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add a role",
                "fullTitle": "acl addRoleDomainResourcePermission(role, domain, resource, permission) should add a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "e0b3d11e-8cd9-4c7b-abba-153743e8e580",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8f2b2d57-c0db-456f-ab15-6221590a1e66",
              "27c0c0cd-3aa1-4014-9a9a-374578e29bbf",
              "e0b3d11e-8cd9-4c7b-abba-153743e8e580"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0dffb910-8801-4f9a-b1e3-f3febf62e087",
            "title": "removeRoleDomainResourcePermission(role, domain, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a permission from a role resource",
                "fullTitle": "acl removeRoleDomainResourcePermission(role, domain, resource, permission) should remove a permission from a role resource",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(true)\nacl.removeRoleDomainResourcePermission(role, 'domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role, 'domain', res, per)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "2e9dcb79-78ea-43fa-ae2e-3ff813ad7c99",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2e9dcb79-78ea-43fa-ae2e-3ff813ad7c99"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7924a6f1-ea7c-4efd-9675-db7250d7e031",
            "title": "removeDomainResourcePermission(domain, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a permission from a resource on all roles",
                "fullTitle": "acl removeDomainResourcePermission(domain, resource, permission) should remove a permission from a resource on all roles",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo1',\nrole2 = 'foo2',\nrole3 = 'foo3',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleDomainResource(role1, 'domain', res)\nacl.addRoleDomainResourcePermission(role2, 'domain', res, per)\nacl.addRoleDomainResourcePermission(role3, 'domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role1, 'domain', res, per)).to.be.equal(false)\nexpect(acl.hasRoleDomainResourcePermission(role2, 'domain', res, per)).to.be.equal(true)\nexpect(acl.hasRoleDomainResourcePermission(role3, 'domain', res, per)).to.be.equal(true)\nacl.removeDomainResourcePermission('domain', res, per)\nexpect(acl.hasRoleDomainResourcePermission(role1, 'domain', res, per)).to.be.equal(false)\nexpect(acl.hasRoleDomainResourcePermission(role2, 'domain', res, per)).to.be.equal(false)\nexpect(acl.hasRoleDomainResourcePermission(role3, 'domain', res, per)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "0efe6cd7-1397-4535-9ce0-3f4bb55321c5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not remove the role and resouce",
                "fullTitle": "acl removeDomainResourcePermission(domain, resource, permission) should not remove the role and resouce",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo1',\nrole2 = 'foo2',\nrole3 = 'foo3',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleDomainResource(role1, 'domain', res)\nacl.addRoleDomainResourcePermission(role2, 'domain', res, per)\nacl.addRoleDomainResourcePermission(role3, 'domain', res, per)\nacl.removeDomainResourcePermission(res, 'domain', per)\nexpect(acl.hasRoleDomainResource(role1, 'domain', res, per)).to.be.equal(true)\nexpect(acl.hasRoleDomainResource(role2, 'domain', res, per)).to.be.equal(true)\nexpect(acl.hasRoleDomainResource(role3, 'domain', res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "8d41b347-f587-4aa7-906a-1d75ecd22587",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0efe6cd7-1397-4535-9ce0-3f4bb55321c5",
              "8d41b347-f587-4aa7-906a-1d75ecd22587"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7ede5465-32dc-4ce0-81e4-c30c24b27c23",
            "title": "getUserRoles(user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of all the roles a user have",
                "fullTitle": "acl getUserRoles(user) should return a list of all the roles a user have",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nuser  = 'foobar',\nrole1 = 'foo',\nrole2 = 'bar',\nrole3 = 'baz',\nrole4 = 'qux'\nacl.addRoleUser(role1, user)\nacl.addRoleUser(role2, user)\nacl.addRoleChild(role1, role3)\nacl.addRoleChild(role2, role4)\nexpect(acl.getUserRoles(user)).to.have.members([role1, role2])",
                "err": {},
                "isRoot": false,
                "uuid": "2546f737-45b2-4360-81c8-1e88d1900ef6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2546f737-45b2-4360-81c8-1e88d1900ef6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3f2c31dd-a3ec-45ec-bfc4-06ca11e51ed7",
            "title": "getUserRolesRecursive(user)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of roles and the derieved roles a user have",
                "fullTitle": "acl getUserRolesRecursive(user) should return a list of roles and the derieved roles a user have",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nuser1     = 'foobar1',\nuser2     = 'foobar2',\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nrole4     = 'qux',\nexpected  = [role1, role2, role3]\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user1)\nacl.addRoleChild(role1, role3)\nacl.addRole(role4)\nexpect(acl.getUserRolesRecursively(user1)).to.have.members(expected)\nacl.addRoleUser(role4, user2)\nexpect(acl.getUserRolesRecursively(user1)).to.have.members(expected)",
                "err": {},
                "isRoot": false,
                "uuid": "76433e36-80da-47d9-8b08-8988df62cbe7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "76433e36-80da-47d9-8b08-8988df62cbe7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9df431c7-8999-4cb1-91d8-ad2e34beff48",
            "title": "getRolesRecursively(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of roles derieved of the root role",
                "fullTitle": "acl getRolesRecursively(role) should return a list of roles derieved of the root role",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nrole4     = 'qux',\nexpected  = [role1, role3]\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleChild(role1, role3)\nexpect(acl.getRolesRecursively(role1)).to.have.members(expected)\nacl.addRole(role4)\nexpect(acl.getRolesRecursively(role1)).to.have.members(expected)",
                "err": {},
                "isRoot": false,
                "uuid": "ee169774-b5e5-415b-a6c9-01230369bdb6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ee169774-b5e5-415b-a6c9-01230369bdb6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "28df50e8-7da1-4883-a425-0421dad6a7d0",
            "title": "isUserAuthorized(user, domain, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only allow a valid permission",
                "fullTitle": "acl isUserAuthorized(user, domain, resource, permission) should only allow a valid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser        = 'foo',\nrole        = 'bar',\ndomain      = 'domain',\nresource    = 'baz',\npermission  = 'qux'\nacl.addRoleUser(role, user)\nacl.addRoleDomainResourcePermission(role, domain, resource, permission)\nconst result = acl.isUserAuthorized(user, domain, resource, permission)\nexpect(result).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "f68451c9-4a0f-4d19-9d28-7411edcde122",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow a valid permission through a role hierarchy",
                "fullTitle": "acl isUserAuthorized(user, domain, resource, permission) should allow a valid permission through a role hierarchy",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser1       = 'foo1',\nuser2       = 'foo2',\nrole1       = 'bar1',\nrole2       = 'bar2',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user2)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, permission)\nacl.addRoleDomainResourcePermission(role2, domain, resource2, permission)\nconst result1 = acl.isUserAuthorized(user1, domain, resource2, permission)\nexpect(result1).to.be.equal(false)\nacl.addRoleChild(role1, role2)\nconst result2 = acl.isUserAuthorized(user1, domain, resource2, permission)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "3838e7f3-696d-42b7-8b2a-7a54fb6bb981",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow an invalid permission",
                "fullTitle": "acl isUserAuthorized(user, domain, resource, permission) should not allow an invalid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser1       = 'foo1',\nuser2       = 'foo2',\nrole1       = 'bar1',\nrole2       = 'bar2',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user2)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, permission)\nacl.addRoleDomainResourcePermission(role2, domain, resource2, permission)\nconst result1 = acl.isUserAuthorized(user1, domain, resource1, permission)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isUserAuthorized(user1, domain, resource2, permission)\nexpect(result2).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "425a3997-1e32-44a1-a1b6-d98f8683333b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f68451c9-4a0f-4d19-9d28-7411edcde122",
              "3838e7f3-696d-42b7-8b2a-7a54fb6bb981",
              "425a3997-1e32-44a1-a1b6-d98f8683333b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "91895f5e-931e-4b1b-b2a1-a0b1e1c93b73",
            "title": "isRoleAuthorized(role, domain, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.acl/index.test.js",
            "file": "/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only allow a valid permission",
                "fullTitle": "acl isRoleAuthorized(role, domain, resource, permission) should only allow a valid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole        = 'bar',\ndomain      = 'domain',\nresource    = 'baz',\npermission  = 'qux'\nacl.addRole(role)\nacl.addRoleDomainResourcePermission(role, domain, resource, permission)\nconst result = acl.isRoleAuthorized(role, domain, resource, permission)\nexpect(result).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "dad8ee93-09c7-4b51-b523-0602482c563b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow a valid permission through a role hierarchy",
                "fullTitle": "acl isRoleAuthorized(role, domain, resource, permission) should allow a valid permission through a role hierarchy",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nrole2       = 'bar2',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, permission)\nacl.addRoleDomainResourcePermission(role2, domain, resource2, permission)\nconst result1 = acl.isRoleAuthorized(role1, domain, resource2, permission)\nexpect(result1).to.be.equal(false)\nacl.addRoleChild(role1, role2)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource2, permission)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "6e267db9-582c-489b-a454-c56b6cf1a0a8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow an invalid permission",
                "fullTitle": "acl isRoleAuthorized(role, domain, resource, permission) should not allow an invalid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nrole2       = 'bar2',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, permission)\nacl.addRoleDomainResourcePermission(role2, domain, resource2, permission)\nconst result1 = acl.isRoleAuthorized(role1, domain, resource1, permission)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource2, permission)\nexpect(result2).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "11331e1c-4eb4-427c-9c7d-b664487283c8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "* for resouce should allow access to all resources",
                "fullTitle": "acl isRoleAuthorized(role, domain, resource, permission) * for resouce should allow access to all resources",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRole(role1)\nacl.addRoleDomainResourcePermission(role1, domain, '*', permission)\nconst result1 = acl.isRoleAuthorized(role1, domain, resource1, permission)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource2, permission)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "9bf16ada-442c-456f-9269-879ba372d3e7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "* for permission should allow access to all permissions",
                "fullTitle": "acl isRoleAuthorized(role, domain, resource, permission) * for permission should allow access to all permissions",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\ndomain      = 'domain',\nresource1   = 'baz1',\npermission1 = 'qux1',\npermission2 = 'qux2'\nacl.addRole(role1)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, '*')\nconst result1 = acl.isRoleAuthorized(role1, domain, resource1, permission1)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource1, permission2)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "3a910126-60cd-4c45-a71d-cc1d13dde881",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "* for permission and resource should allow access to everything",
                "fullTitle": "acl isRoleAuthorized(role, domain, resource, permission) * for permission and resource should allow access to everything",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission1 = 'qux1',\npermission2 = 'qux2'\nacl.addRole(role1)\nacl.addRoleDomainResourcePermission(role1, domain, '*', '*')\nconst result1 = acl.isRoleAuthorized(role1, domain, resource1, permission1)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource2, permission2)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "f0ef028b-c0e5-4cb2-b9d1-886d7e2ecaae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "undefined permission should allow access on a resource level",
                "fullTitle": "acl isRoleAuthorized(role, domain, resource, permission) undefined permission should allow access on a resource level",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nrole2       = 'bar2',\ndomain      = 'domain',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission1 = 'qux1',\npermission2 = 'qux2'\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleDomainResourcePermission(role1, domain, resource1, permission1)\nacl.addRoleDomainResourcePermission(role2, domain, resource2, permission2)\nconst result1 = acl.isRoleAuthorized(role1, domain, resource1)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, domain, resource2)\nexpect(result2).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "80e845d9-fbcf-4b5d-8c10-caa8a68f191d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dad8ee93-09c7-4b51-b523-0602482c563b",
              "6e267db9-582c-489b-a454-c56b6cf1a0a8",
              "11331e1c-4eb4-427c-9c7d-b664487283c8",
              "9bf16ada-442c-456f-9269-879ba372d3e7",
              "3a910126-60cd-4c45-a71d-cc1d13dde881",
              "f0ef028b-c0e5-4cb2-b9d1-886d7e2ecaae",
              "80e845d9-fbcf-4b5d-8c10-caa8a68f191d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}